{"version":3,"file":"bundle.index.eb8a002b00af9c552b98.js","mappings":"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","sources":["webpack://transformers/webpack/runtime/chunk loaded","webpack://transformers/webpack/runtime/create fake namespace object","webpack://transformers/./src/App/PageHeader/PageHeader.js","webpack://transformers/./src/App/PageHeader/PageHeader.css?080f","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/constOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/JotaiState.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/textUtils.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/performOperation.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/RecentOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.css?4456","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.js","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.css?a3ee","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.js","webpack://transformers/./src/App/Dashboard/Dashboard.js","webpack://transformers/./src/App/Dashboard/Dashboard.css?d7b8","webpack://transformers/./src/App/PageFooter/PageFooter.js","webpack://transformers/./src/App/PageFooter/PageFooter.css?9170","webpack://transformers/./src/App/App.js","webpack://transformers/./src/index.js","webpack://transformers/webpack/bootstrap","webpack://transformers/webpack/runtime/amd define","webpack://transformers/webpack/runtime/compat get default export","webpack://transformers/webpack/runtime/define property getters","webpack://transformers/webpack/runtime/global","webpack://transformers/webpack/runtime/hasOwnProperty shorthand","webpack://transformers/webpack/runtime/make namespace object","webpack://transformers/webpack/runtime/node module decorator","webpack://transformers/webpack/runtime/publicPath","webpack://transformers/webpack/runtime/jsonp chunk loading","webpack://transformers/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import React from 'react';\n\nimport styles from './PageHeader.css';\n\nclass PageHeader extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageHeader}>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                        marginTop: 25\n                    }}\n                >\n                    <h1 style={{ margin: 0, textAlign: 'center' }}>\n                        {'Transformers: '}\n                        <span style={{ fontVariant: 'small-caps' }}>\n                            <span style={{ letterSpacing: '0.05em' }}>\n                                Operations&nbsp;on&nbsp;the&nbsp;Text\n                            </span>\n                        </span>\n                    </h1>\n                    <h3 style={{ fontSize: 11, margin: '10px 0 0 0', color: '#555', textAlign: 'center' }}>\n                        Operations for Lists, Sets, CSV, JSON, etc\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageHeader };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageHeader\":\"PageHeader__PageHeader--AAWQ1\"};","// import React from 'react';\n\nimport CircleIcon from '@mui/icons-material/Circle.js';\n\nimport AppRegistrationIcon from '@mui/icons-material/AppRegistration.js';\n\nimport CompressIcon from '@mui/icons-material/Compress.js';\n\nimport DataObjectIcon from '@mui/icons-material/DataObject.js';\n\nimport SettingsEthernetIcon from '@mui/icons-material/SettingsEthernet.js';\nimport CopyAllIcon from '@mui/icons-material/CopyAll.js';\n// import RestaurantIcon from '@mui/icons-material/Restaurant.js';\n\nimport SortIcon from '@mui/icons-material/Sort.js';\nimport AbcIcon from '@mui/icons-material/Abc.js';\nimport ParkIcon from '@mui/icons-material/Park.js';\nimport ShuffleOnIcon from '@mui/icons-material/ShuffleOn.js';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown.js';\n\nimport CommitIcon from '@mui/icons-material/Commit.js';\nimport CleaningServicesIcon from '@mui/icons-material/CleaningServices.js';\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote.js';\n\nimport ReorderIcon from '@mui/icons-material/Reorder.js';\nimport AppsIcon from '@mui/icons-material/Apps.js';\nimport MoodIcon from '@mui/icons-material/Mood.js';\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove.js';\nimport CategoryIcon from '@mui/icons-material/Category.js';\n\nimport BuildIcon from '@mui/icons-material/Build.js';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage.js';\nimport LastPageIcon from '@mui/icons-material/LastPage.js';\n\n// import VerticalAlignTopIcon from '@mui/icons-material/VerticalAlignTop.js';\n// import VerticalAlignBottomIcon from '@mui/icons-material/VerticalAlignBottom.js';\n\nimport BarChartIcon from '@mui/icons-material/BarChart.js';\n// import FormatListNumberedRtlIcon from '@mui/icons-material/FormatListNumberedRtl.js';\n// import SubtitlesIcon from '@mui/icons-material/Subtitles.js';\n// import SubtitlesOutlinedIcon from '@mui/icons-material/SubtitlesOutlined.js';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    mode_css = 'css',\n    mode_csv = 'csv',\n    mode_json = 'json',\n    mode_list = 'list';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    $css_sample_css                          = '$css_sample_css',\n\n    $css_formatCss                           = '$css_formatCss',\n    $css_minifyCss                           = '$css_minifyCss',\n\n    $css_cssToScss                           = '$css_cssToScss',\n\n    $list_sample_list                        = '$list_sample_list',\n\n    $list_removeEmptyLines                   = '$list_removeEmptyLines',\n    $list_removeDuplicates                   = '$list_removeDuplicates',\n    // $list_removeBeyondNLines              = '$list_removeBeyondNLines',\n\n    $list_sort                               = '$list_sort',\n    $list_caseInsensitiveSort                = '$list_caseInsensitiveSort',\n    $list_naturalSort                        = '$list_naturalSort',\n    $list_randomize                          = '$list_randomize',\n    $list_reverse                            = '$list_reverse',\n\n    $list_trimLines                          = '$list_trimLines',\n    $list_removeCommaCharacterAtLineEnds     = '$list_removeCommaCharacterAtLineEnds',\n    $list_removeQuoteAndApostropheCharacters = '$list_removeQuoteAndApostropheCharacters',\n\n    $list_getStats                           = '$list_getStats',\n    // $list_countLines                      = '$list_countLines',\n    // $list_countCharacters                 = '$list_countCharacters',\n    // $list_countWords                      = '$list_countWords',\n    // $list_countUniqueWords                = '$list_countUniqueWords',\n\n    $list_linesToJsonArray                   = '$list_linesToJsonArray',\n\n    $csv_sample_csv                          = '$csv_sample_csv',\n\n    $csv_removeFirstColumnFromCsv            = '$csv_removeFirstColumnFromCsv',\n    $csv_removeLastColumnFromCsv             = '$csv_removeLastColumnFromCsv',\n\n    $csv_csvToJson                           = '$csv_csvToJson',\n\n    $json_sample_json                        = '$json_sample_json',\n\n    $json_formatJson                         = '$json_formatJson',\n    $json_minifyJson                         = '$json_minifyJson',\n\n    $json_removeProperty                     = '$json_removeProperty',\n\n    $json_sortJson                           = '$json_sortJson',\n\n    $json_fixDataTypes                       = '$json_fixDataTypes',\n\n    // $json_removeFirstProperty             = '$json_removeFirstProperty',\n    // $json_removeLastProperty              = '$json_removeLastProperty',\n\n    $json_jsonToLines                        = '$json_jsonToLines',\n    $json_jsonToCsv                          = '$json_jsonToCsv';\n\n\n// eslint-disable-next-line import/exports-last\nexport const defaultRecommendedOperations = [\n    $css_sample_css,\n    $csv_sample_csv,\n    $json_sample_json,\n    $list_sample_list\n];\n\n// eslint-disable-next-line import/exports-last\nexport const IconNotAvailable = CircleIcon;\n\nconst\n    availableOperations = {\n        [mode_css]: {\n            [$css_sample_css]                          : { message: 'Sample CSS',                             Icon: AppRegistrationIcon },\n\n            [$css_formatCss]                           : { message: 'Format CSS',                             Icon: MoodIcon },\n            [$css_minifyCss]                           : { message: 'Minify CSS',                             Icon: CompressIcon },\n\n            [$css_cssToScss]                           : { message: 'CSS to SCSS',                            Icon: DataObjectIcon }\n        },\n        [mode_csv]: {\n            [$csv_sample_csv]                          : { message: 'Sample CSV',                             Icon: AppRegistrationIcon },\n\n            [$csv_removeFirstColumnFromCsv]            : { message: 'Remove first column from CSV',           Icon: FirstPageIcon },\n            [$csv_removeLastColumnFromCsv]             : { message: 'Remove last column from CSV',            Icon: LastPageIcon },\n\n            [$csv_csvToJson]                           : { message: 'CSV to JSON',                            Icon: DataObjectIcon }\n        },\n        [mode_json]: {\n            [$json_sample_json]                        : { message: 'Sample JSON',                            Icon: AppRegistrationIcon },\n\n            [$json_formatJson]                         : { message: 'Format JSON',                            Icon: MoodIcon },\n            [$json_minifyJson]                         : { message: 'Minify JSON',                            Icon: CompressIcon },\n\n            [$json_removeProperty]                     : { message: 'Remove property',                        Icon: PlaylistRemoveIcon },\n\n            [$json_sortJson]                           : { message: 'Sort JSON',                              Icon: CategoryIcon },\n\n            [$json_fixDataTypes]                       : { message: 'Fix data types',                         Icon: BuildIcon },\n\n            // [$json_removeFirstProperty]             : { message: 'Remove first property',                  Icon: VerticalAlignTopIcon },\n            // [$json_removeLastProperty]              : { message: 'Remove last property',                   Icon: VerticalAlignBottomIcon },\n\n            [$json_jsonToLines]                        : { message: 'JSON to lines',                          Icon: ReorderIcon },\n            [$json_jsonToCsv]                          : { message: 'JSON to CSV',                            Icon: AppsIcon }\n        },\n        [mode_list]: {\n            [$list_sample_list]                        : { message: 'Sample list',                            Icon: AppRegistrationIcon },\n\n            [$list_removeEmptyLines]                   : { message: 'Remove empty lines',                     Icon: SettingsEthernetIcon },\n            [$list_removeDuplicates]                   : { message: 'Remove duplicates',                      Icon: CopyAllIcon },\n            // [$list_removeBeyondNLines]              : { message: 'Remove beyond N lines',                  Icon: RestaurantIcon },\n\n            [$list_sort]                               : { message: 'Sort',                                   Icon: SortIcon },\n            [$list_caseInsensitiveSort]                : { message: 'Case-insensitive sort',                  Icon: AbcIcon },\n            [$list_naturalSort]                        : { message: 'Natural sort',                           Icon: ParkIcon },\n            [$list_randomize]                          : { message: 'Randomize',                              Icon: ShuffleOnIcon },\n            [$list_reverse]                            : { message: 'Reverse',                                Icon: KeyboardDoubleArrowDownIcon },\n\n            [$list_trimLines]                          : { message: 'Trim lines',                             Icon: CommitIcon },\n            [$list_removeCommaCharacterAtLineEnds]     : { message: 'Remove comma character at line ends',    Icon: CleaningServicesIcon },\n            [$list_removeQuoteAndApostropheCharacters] : { message: 'Remove quote and apostrophe characters', Icon: FormatQuoteIcon },\n\n            [$list_getStats]                           : { message: 'Get stats',                              Icon: BarChartIcon },\n            // [$list_countLines]                      : { message: 'Count lines',                            Icon: FormatListNumberedRtlIcon },\n            // [$list_countCharacters]                 : { message: 'Count characters',                       Icon: AbcIcon },\n            // [$list_countWords]                      : { message: 'Count words',                            Icon: SubtitlesIcon },\n            // [$list_countUniqueWords]                : { message: 'Count unique words',                     Icon: SubtitlesOutlinedIcon },\n\n            [$list_linesToJsonArray]                   : { message: 'Lines to JSON Array',                    Icon: DataObjectIcon }\n        }\n    };\n\nconst allOperationsById = {};\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        allOperationsById[operationId] = operationsForMode[operationId];\n    }\n}\n\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        operationsForMode[operationId].id = operationId;\n    }\n}\n\nconst allOperationIds = Object.keys(allOperationsById);\n\nexport {\n    availableOperations,\n    allOperationsById,\n    allOperationIds\n};\n","import { atom } from 'jotai';\n\nimport {\n    allOperationIds,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nconst recentOperationsFromLocalStorage = localStorage.getItem('recentOperations');\n\nlet recentOperations = [];\ntry {\n    recentOperations = JSON.parse(recentOperationsFromLocalStorage);\n    if (!Array.isArray(recentOperations)) {\n        recentOperations = defaultRecommendedOperations;\n    }\n} catch (err) {\n    console.error(err);\n}\n\n// Remove operations that are not available anymore with that name\nrecentOperations.filter(operation => {\n    return allOperationIds.includes(operation);\n});\n\nconst recentOperationsAtom = atom(recentOperations);\n\nexport { recentOperationsAtom };\n","import jsonStableStringify from 'json-stable-stringify';\n\nconst removeEmptyLines = function (lines) {\n    const output = lines.filter((x) => {\n        return x;\n    });\n    return output;\n};\n\nconst removeDuplicates = function (lines) {\n    const output = [...new Set(lines)];\n    return output;\n};\n\nconst trimLine = (line) => {\n    return line.trim();\n};\nconst trimLines = function (lines) {\n    const output = lines.map(trimLine);\n    return output;\n};\n\nconst removeMatchingCharacterAtEndFromLine = function (line, char) {\n    if (line[line.length - 1] === char) {\n        return line.substring(0, line.length - 1);\n    }\n    return line;\n};\n\nconst removeCommaCharacterAtEndFromLine = function (line) {\n    return removeMatchingCharacterAtEndFromLine(line, ',');\n};\n\nconst removeCommaCharacterAtEndFromLines = function (lines) {\n    const output = lines.map(removeCommaCharacterAtEndFromLine);\n    return output;\n};\n\nconst removeQuoteAndApostropheCharactersFromLine = function (line) {\n    return (\n        line\n            .replaceAll('\"', '')\n            .replaceAll(\"'\", '')\n    );\n};\nconst removeQuoteAndApostropheCharactersFromLines = function (lines) {\n    const output = lines.map(removeQuoteAndApostropheCharactersFromLine);\n    return output;\n};\n\nconst removeLastColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.pop();\n    return columns.join(',');\n};\nconst removeLastColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeLastColumnFromCsvLine);\n    return output;\n};\n\nconst removeFirstColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.shift();\n    const output = columns.join(',');\n    return output;\n};\nconst removeFirstColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeFirstColumnFromCsvLine);\n    return output;\n};\n\nconst csvToJson = function (lines) {\n    const output = ['['];\n    const headers = lines[0].split(',');\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const columns = line.split(',');\n        const obj = {};\n\n        // eslint-disable-next-line unicorn/no-for-loop\n        for (let j = 0; j < columns.length; j++) {\n            const column = columns[j];\n            const header = headers[j];\n            obj[header] = column;\n        }\n        if (i < lines.length - 1) {\n            output.push('\\t' + JSON.stringify(obj) + ',');\n        } else {\n            output.push('\\t' + JSON.stringify(obj));\n        }\n    }\n    output.push(']');\n    return output;\n};\n\nconst traverseNode = function (root, transform) {\n    const output = transform(root);\n\n    if (typeof output === 'object') {\n        for (const key in output) {\n            output[key] = traverseNode(output[key], transform);\n        }\n    }\n\n    return output;\n};\n\nconst fixDataTypes = function (json) {\n    const output = traverseNode(json, function (node) {\n        if (typeof node === 'string') {\n            if (node === 'true') {\n                node = true;\n            } else if (node === 'false') {\n                node = false;\n            } else if (node === 'null') {\n                node = null;\n            } else if (String(Number(node)) === node) {\n                if (\n                    String(Number(node)) === 'Infinity' ||\n                    String(Number(node)) === '-Infinity' ||\n                    String(Number(node)) === 'NaN'\n                ) {\n                    // Do nothing\n                } else {\n                    node = Number(node);\n                }\n            }\n        } else if (Array.isArray(node)) {\n            node = node.map(item => {\n                return fixDataTypes(item);\n            });\n        } else if (typeof node === 'object') {\n            for (const key in node) {\n                node[key] = fixDataTypes(node[key]);\n            }\n        }\n\n        return node;\n    });\n\n    return output;\n};\n\nconst jsonToCsv = function (json) {\n    const line = [];\n    const output = [];\n\n    const keys = Object.keys(json[0]);\n    for (const key of keys) {\n        line.push(key);\n    }\n    output.push(line.join(','));\n\n    for (const ob of json) {\n        const line = [];\n        for (const key of keys) {\n            line.push(ob[key]);\n        }\n        output.push(line.join(','));\n    }\n\n    return output.join('\\n');\n};\n\nexport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n};\n","import {\n    beautifyCss,\n    cssToScss,\n    minifyCss\n} from 'helpmate-css/dist/index.js';\n\nimport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n} from './textUtils.js';\n\nimport {\n    $css_sample_css,\n\n    $css_cssToScss,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv\n} from './constOperations.js';\n\nconst performOperation = async function ({ getInputValue, operation }) {\n    try {\n        if (\n            [\n                $css_formatCss,\n                $css_minifyCss,\n                $css_cssToScss\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            let output;\n\n            switch (operation) {\n                case $css_formatCss:\n                    output = beautifyCss(input);\n                    break;\n                case $css_minifyCss:\n                    output = minifyCss(input);\n                    break;\n                case $css_cssToScss:\n                    if (input.trim() === '') {\n                        output = input;\n                    } else {\n                        output = cssToScss(input);\n\n                        if (output === 'Error: no source supplied to csspretty.') {\n                            // eslint-disable-next-line no-alert\n                            alert('Sorry! The CSS to SCSS conversion failed.\\n\\nPlease try again with some simpler syntax.');\n                        }\n                    }\n                    break;\n            }\n\n            return [null, output];\n        }\n        else if (\n            [\n                $json_formatJson,\n                $json_minifyJson,\n                $json_removeProperty,\n                $json_sortJson,\n                $json_fixDataTypes,\n                $json_jsonToLines,\n                $json_jsonToCsv\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const jsonInput = JSON.parse(input);\n            let output;\n\n            switch (operation) {\n                case $json_formatJson:\n                    output = JSON.stringify(jsonInput, null, '\\t');\n                    break;\n                case $json_minifyJson:\n                    output = JSON.stringify(jsonInput);\n                    break;\n                case $json_removeProperty:\n                    // Just a block\n                    {\n                        // Remove a property from a JSON object recursively\n                        // TODO: Optimize this function\n                        // TODO: Verify that this function works as expected for all cases\n                        const removePropertyRecursively = (obj, propertyName) => {\n                            // eslint-disable-next-line no-prototype-builtins\n                            if (obj.hasOwnProperty(propertyName)) {\n                                delete obj[propertyName];\n                            } else {\n                                Object.keys(obj).forEach(key => {\n                                    if (typeof obj[key] === 'object') {\n                                        removePropertyRecursively(obj[key], propertyName);\n                                    } else if (Array.isArray(obj[key])) {\n                                        obj[key].forEach(item => {\n                                            if (typeof item === 'object') {\n                                                removePropertyRecursively(item, propertyName);\n                                            } else {\n                                                // Do nothing\n                                            }\n                                        });\n                                    } else {\n                                        // Do nothing\n                                    }\n                                });\n                            }\n                        };\n\n                        // eslint-disable-next-line no-alert\n                        const propertyName = prompt('Please enter the name of the property to remove:');\n                        if (propertyName) {\n                            removePropertyRecursively(jsonInput, propertyName);\n                            output = JSON.stringify(jsonInput, null, '\\t');\n                        } else {\n                            return [new Error('Please provide a property name.')];\n                        }\n                    }\n                    break;\n                case $json_sortJson:\n                    output = jsonStableStringify(jsonInput, { space: '\\t' });\n                    break;\n                case $json_fixDataTypes:\n                    output = fixDataTypes(jsonInput);\n                    output = JSON.stringify(output, null, '\\t');\n                    break;\n                case $json_jsonToLines:\n                    if (\n                        Array.isArray(jsonInput) &&\n                        jsonInput.every(item => typeof item === 'string')\n                    ) {\n                        output = jsonInput.join('\\n');\n                    } else {\n                        return [new Error('Please provide an Array of Strings as the input.')];\n                    }\n                    break;\n                case $json_jsonToCsv:\n                    output = jsonToCsv(jsonInput);\n                    break;\n            }\n\n            return [null, output];\n        } else if (\n            [\n                $list_getStats\n            ].includes(operation)\n        ) {\n            switch (operation) {\n                case $list_getStats:\n                {\n                    const stats = {};\n\n                    const input = getInputValue();\n                    const lines = input.split('\\n');\n                    stats.linesCount = lines.length;\n                    stats.charactersCount = input.length;\n\n                    // Replace all punctuation characters with a single space\n                    const inputWithoutPunctuation = input.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, ' '); // eslint-disable-line no-useless-escape\n\n                    // Replace all continuous whitespace characters with a single space\n                    const inputWithoutWhitespace = inputWithoutPunctuation.replace(/\\s+/g, ' ');\n\n                    const words = inputWithoutWhitespace.split(' ');\n                    stats.wordsCount = words.length; // Not a perfect way to count words, but it's good enough for now.\n\n                    stats.uniqueWordsCount = (new Set(words)).size;\n\n                    return [null, null, { stats }];\n                }\n            }\n        } else if (\n            [\n                $css_sample_css,\n\n                $csv_sample_csv,\n\n                $csv_removeFirstColumnFromCsv,\n                $csv_removeLastColumnFromCsv,\n\n                $csv_csvToJson,\n\n                $json_sample_json,\n\n                $list_sample_list,\n\n                $list_removeEmptyLines,\n                $list_removeDuplicates,\n\n                $list_sort,\n                $list_caseInsensitiveSort,\n                $list_naturalSort,\n                $list_randomize,\n                $list_reverse,\n\n                $list_trimLines,\n                $list_removeCommaCharacterAtLineEnds,\n                $list_removeQuoteAndApostropheCharacters,\n\n                $list_linesToJsonArray\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const lines = input.split('\\n');\n\n            let output = lines;\n\n            switch (operation) {\n                case $css_sample_css:\n                    output = [\n                        'body {',\n                        '    background-color: #f0f0f0;',\n                        '}',\n                        '',\n                        'body h1 {',\n                        '    color: #000000;',\n                        '    font-size: 24px;',\n                        '    font-weight: bold;',\n                        '    text-align: center;',\n                        '}',\n                        ''\n                    ];\n                    break;\n\n                case $csv_sample_csv:\n                    output = [\n                        'Name,Age,Height',\n                        'Charlie,22,1.85',\n                        'Bob,21,1.75',\n                        'Alice,20,1.65',\n                        'David,23,1.95'\n                    ];\n                    break;\n                case $csv_removeFirstColumnFromCsv:\n                    output = removeFirstColumnFromCsvLines(lines);\n                    break;\n                case $csv_removeLastColumnFromCsv:\n                    output = removeLastColumnFromCsvLines(lines);\n                    break;\n\n                case $csv_csvToJson:\n                    output = csvToJson(lines);\n                    break;\n\n                case $json_sample_json:\n                    output = [\n                        '{',\n                        '    \"data\": [',\n                        '        { \"name\": \"Charlie\", \"age\": 22, \"height\": 1.85 },',\n                        '        { \"name\": \"Bob\",     \"age\": 21, \"height\": 1.75 },',\n                        '        { \"name\": \"Alice\",   \"age\": 20, \"height\": 1.65 },',\n                        '        { \"name\": \"David\",   \"age\": 23, \"height\": 1.95 }',\n                        '    ]',\n                        '}'\n                    ];\n                    break;\n\n                case $list_sample_list:\n                    output = [\n                        'Charlie',\n                        'Bob',\n                        'Alice',\n                        'David'\n                    ];\n                    break;\n\n                case $list_removeEmptyLines:\n                    output = removeEmptyLines(lines);\n                    break;\n                case $list_removeDuplicates:\n                    output = removeDuplicates(lines);\n                    break;\n\n                case $list_sort:\n                    lines.sort(); // TODO: We may want to use \".toSorted()\" when it becomes available in modern browsers (though performance-wise it may actually be disadvantageous).\n                    output = lines;\n                    break;\n                case $list_caseInsensitiveSort:\n                    lines.sort((a, b) => {\n                        return a.toLowerCase().localeCompare(b.toLowerCase());\n                    });\n                    output = lines;\n                    break;\n                case $list_naturalSort:\n                    lines.sort((a, b) => {\n                        return a.localeCompare(b, undefined, { numeric: true });\n                    });\n                    output = lines;\n                    break;\n                case $list_randomize:\n                    lines.sort(() => Math.random() - 0.5);\n                    output = lines;\n                    break;\n                case $list_reverse:\n                    lines.reverse();\n                    output = lines;\n                    break;\n\n                case $list_trimLines:\n                    output = trimLines(lines);\n                    break;\n                case $list_removeCommaCharacterAtLineEnds:\n                    output = removeCommaCharacterAtEndFromLines(lines);\n                    break;\n                case $list_removeQuoteAndApostropheCharacters:\n                    output = removeQuoteAndApostropheCharactersFromLines(lines);\n                    break;\n\n                case $list_linesToJsonArray:\n                    output = JSON.stringify(lines, null, '\\t');\n                    output = output.split('\\n');\n                    break;\n            }\n\n            const finalOutput = output.join('\\n');\n            return [null, finalOutput];\n        } else {\n            return [new Error(`Error: Implementation is not available for operation: ${operation}`)];\n        }\n    } catch (err) {\n        return [err];\n    }\n};\n\nexport { performOperation };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useAtom } from 'jotai';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\n\nimport {\n    IconNotAvailable,\n\n    availableOperations,\n    allOperationsById\n} from './constOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nconst RecentOperations = function ({\n    editorRef,\n    onValueUpdate,\n    mode\n}) {\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                width: 291,\n                overflow: 'hidden',\n                paddingLeft: 10\n            }}\n        >\n            {\n                recentOperations\n                    .filter(operation => {\n                        const operationsForMode = availableOperations[mode];\n                        return operationsForMode[operation];\n                    })\n                    .map((operation, index) => {\n                        const operationsForMode = availableOperations[mode];\n                        return (\n                            <div key={index}>\n                                <IconButton\n                                    size=\"small\"\n                                    title={(\n                                        operationsForMode[operation]?.message ||\n                                        operation\n                                    )}\n                                    onClick={async () => {\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const operationsByUser = [\n                                            operation,\n                                            ...recentOperations\n                                        ];\n                                        // Remove duplicate operations (keep the first occurrence)\n                                        const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                            return operationsByUser.indexOf(operation) === index;\n                                        });\n                                        setRecentOperations(uniqueOperationsByUser);\n                                        localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const getInputValue = () => {\n                                            const value = editorRef.current.getValue();\n                                            return value;\n                                        };\n                                        const [err, output, extraInfo] = await performOperation({\n                                            getInputValue,\n                                            operation\n                                        });\n\n                                        if (err) {\n                                            console.error(err);\n                                            alert(err.message); // eslint-disable-line no-alert\n                                        } else {\n                                            if (output === null) {\n                                                alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                            } else {\n                                                editorRef.current.setValue(output);\n                                                if (typeof onValueUpdate === 'function') {\n                                                    onValueUpdate(output);\n                                                }\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {(() => {\n                                        let Icon = allOperationsById[operation]?.Icon;\n                                        if (!Icon) {\n                                            Icon = IconNotAvailable;\n                                        }\n                                        return <Icon style={{ fontSize: 16 }} />;\n                                    })()}\n                                </IconButton>\n                            </div>\n                        );\n                    })\n            }\n        </div>\n    );\n};\nRecentOperations.propTypes = {\n    editorRef: PropTypes.object.isRequired,\n    onValueUpdate: PropTypes.func,\n    mode: PropTypes.string.isRequired\n};\n\nexport { RecentOperations };\n","// extracted by mini-css-extract-plugin\nexport default {\"TextList\":\"TextList__TextList--NZ7zn\",\"translucentWithoutHover\":\"TextList__translucentWithoutHover--n0_xk\"};","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver.js'; // https://github.com/securingsincity/react-ace/issues/725#issuecomment-543109155\nimport 'ace-builds/src-noconflict/mode-css.js';\nimport 'ace-builds/src-noconflict/mode-json.js';\nimport 'ace-builds/src-noconflict/theme-github.js';\n// import 'ace-builds/src-noconflict/ext-language_tools.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport Button from '@mui/material/Button/index.js';\n\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined.js';\nimport BorderColorIcon from '@mui/icons-material/BorderColor.js';\n\nimport ContentCutIcon from '@mui/icons-material/ContentCut.js';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy.js';\nimport BackspaceIcon from '@mui/icons-material/Backspace.js';\nimport UndoIcon from '@mui/icons-material/Undo.js';\nimport RedoIcon from '@mui/icons-material/Redo.js';\nimport WrapTextIcon from '@mui/icons-material/WrapText.js';\nimport SaveIcon from '@mui/icons-material/Save.js';\n\nimport Select from '@mui/material/Select/index.js';\n\nimport CheckIcon from '@mui/icons-material/Check.js';\n\nimport StarIcon from '@mui/icons-material/Star.js';\n\nimport { useAtom } from 'jotai';\n\nimport { useLocalStorage } from 'react-use';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport {\n    mode_css,\n    mode_csv,\n    mode_json,\n    mode_list,\n\n    $css_sample_css,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $css_cssToScss,\n\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nimport { RecentOperations } from './RecentOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nimport styles from './TextList.css';\n\nconst copy = async function (simpleText) {\n    try {\n        await navigator.clipboard.writeText(simpleText);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst TextList = function ({\n    placeholder,\n    onLoad,\n    onValueUpdate,\n    allowFileInput,\n    style,\n    editorWidth,\n    editorHeight\n}) {\n    const [mode, setMode] = useLocalStorage('mode', mode_list, { raw: true });\n\n    const [selectedOperations, setSelectedOperations] = useLocalStorage('selectedOperations', {\n        [mode_css]: '',\n        [mode_csv]: '',\n        [mode_json]: '',\n        [mode_list]: ''\n    });\n\n    const operation = selectedOperations[mode];\n\n    const [flagSyntaxHighlighting, setFlagSyntaxHighlighting] = useLocalStorage('flagSyntaxHighlighting', 'yes', { raw: true });\n\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    const [flagLineWrap, setFlagLineWrap] = useLocalStorage('flagLineWrap', 'yes', { raw: true });\n\n    const [refreshUndoRedo, setRefreshUndoRedo] = useState(Date.now());\n\n    const modeForSyntaxHighlighting = (() => {\n        if (flagSyntaxHighlighting === 'yes') {\n            switch (mode) {\n                case mode_css:\n                    return 'css';\n                case mode_csv:\n                    return 'text';\n                case mode_json:\n                    return 'json';\n                case mode_list:\n                    return 'text';\n                default:\n                    return 'text';\n            }\n        } else {\n            return 'text';\n        }\n    })();\n\n    // Save \"editor\" reference for later usage.\n    const editorRef = useRef(null);\n\n    return (\n        <div style={style} className={styles.TextList}>\n            <div style={{ marginTop: 10 }}>\n                <div\n                    className={styles.translucentWithoutHover}\n                    style={{ display: 'flex', justifyContent: 'space-between' }}\n                >\n                    <div style={{ display: 'flex' }}>\n                        {/* Cut button */}\n                        <IconButton\n                            title=\"Cut\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform cut operation\n                                    editor.execCommand('cut');\n                                }\n                            }}\n                        >\n                            <ContentCutIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Copy button */}\n                        <IconButton\n                            title=\"Copy\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform copy operation\n                                    editor.execCommand('copy');\n                                }\n                            }}\n                        >\n                            <ContentCopyIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Clear button */}\n                        <IconButton\n                            title=\"Clear\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    const selectedText = editor.getSelectedText();\n\n                                    if (selectedText) {\n                                        // If there is selected text, then clear only the selected text.\n                                        editor.execCommand('inserttext', { text: '' });\n                                    } else {\n                                        editor.setValue('');\n                                    }\n                                }\n                            }}\n                        >\n                            <BackspaceIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Undo button */}\n                        <IconButton\n                            title=\"Undo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasUndo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('undo');\n                                }\n                            }}\n                        >\n                            <UndoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Redo button */}\n                        <IconButton\n                            title=\"Redo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasRedo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('redo');\n                                }\n                            }}\n                        >\n                            <RedoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Line wrap button */}\n                        <IconButton\n                            title=\"Toggle line wrap\"\n                            size=\"small\"\n                            onClick={() => {\n                                // Raw code for toggling line wrap:\n                                //     editor.getSession().setUseWrapMode(!editor.getSession().getUseWrapMode());\n                                setFlagLineWrap(flagLineWrap === 'yes' ? 'no' : 'yes');\n                            }}\n                        >\n                            <WrapTextIcon\n                                style={{\n                                    fontSize: 16,\n                                    color: flagLineWrap === 'yes' ? '#1976d2' : undefined\n                                }}\n                            />\n                        </IconButton>\n\n                        {/* TODO: Full screen button */}\n\n                        {/* Save button */}\n                        <IconButton\n                            title=\"Save\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    const input = editor.getValue();\n                                    const blob = new Blob([input], { type: 'text/plain' });\n                                    const a = document.createElement('a');\n                                    a.href = URL.createObjectURL(blob);\n                                    let extension;\n                                    switch (mode) {\n                                        case mode_css:\n                                            extension = 'css';\n                                            break;\n                                        case mode_csv:\n                                            extension = 'csv';\n                                            break;\n                                        case mode_json:\n                                            extension = 'json';\n                                            break;\n                                        default:\n                                            extension = 'txt';\n                                    }\n                                    const localTime = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60 * 1000)).toISOString().substring(0, 19).replace('T', ' ');\n                                    const localTimeAsPartOfFilename = localTime.replace(' ', '_').replace(/:/g, '-');\n                                    a.download = `output-${localTimeAsPartOfFilename}.${extension}`;\n                                    a.click();\n                                }\n                            }}\n                        >\n                            <SaveIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n                    </div>\n                    <div style={{ display: 'flex' }}>\n                        <div>\n                            {(() => {\n                                const disabled = (() => {\n                                    if (\n                                        mode === mode_json ||\n                                        mode === mode_css\n                                    ) {\n                                        return false;\n                                    } else {\n                                        return true;\n                                    }\n                                })();\n                                let title;\n                                if (disabled) {\n                                    title = 'Syntax highlighting not available for this mode';\n                                } else {\n                                    if (flagSyntaxHighlighting === 'yes') {\n                                        title = 'Disable syntax highlighting';\n                                    } else {\n                                        title = 'Enable syntax highlighting';\n                                    }\n                                }\n\n                                return (\n                                    <IconButton\n                                        size=\"small\"\n                                        title={title}\n                                        // style={{ marginLeft: 5 }}\n                                        onClick={() => {\n                                            if (disabled) {\n                                                // TODO: Show a tooltip message\n                                            } else {\n                                                setFlagSyntaxHighlighting(\n                                                    flagSyntaxHighlighting === 'yes' ? 'no' : 'yes'\n                                                );\n                                            }\n                                        }}\n                                    >\n                                        {(() => {\n                                            let Icon;\n                                            if (flagSyntaxHighlighting === 'yes') {\n                                                Icon = BorderColorIcon;\n                                            } else {\n                                                Icon = BorderColorOutlinedIcon;\n                                            }\n\n                                            let color;\n                                            if (disabled) {\n                                                color = '#ccc';\n                                            } else {\n                                                if (flagSyntaxHighlighting === 'yes') {\n                                                    color = '#1976d2';\n                                                } else {\n                                                    color = undefined;\n                                                }\n                                            }\n\n                                            return <Icon style={{ fontSize: 16, color }} />;\n                                        })()}\n                                    </IconButton>\n                                );\n                            })()}\n                        </div>\n                        <div style={{ marginLeft: 5 }}>\n                            <Select\n                                native\n                                value={mode}\n                                style={{\n                                    width: 75,\n                                    height: 24,\n                                    fontSize: 11\n                                }}\n                                onChange={(e) => setMode(e.target.value)}\n                            >\n                                <option value={mode_css}>CSS</option>\n                                <option value={mode_csv}>CSV</option>\n                                <option value={mode_json}>JSON</option>\n                                <option value={mode_list}>List</option>\n                            </Select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div>\n                    <AceEditor\n                        placeholder={placeholder}\n                        setOptions={{\n                            // useWorker: false,\n                            // enableBasicAutocompletion: true,\n                            // enableLiveAutocompletion: true,\n                            // enableSnippets: true,\n                            // showLineNumbers: true,\n                            // tabSize: 4,\n                            // useSoftTabs: true,\n\n                            wrap: flagLineWrap === 'yes' ? true : false\n                        }}\n                        mode={modeForSyntaxHighlighting}\n                        theme=\"github\"\n                        onLoad={(editor) => {\n                            editorRef.current = editor;\n                            if (typeof onLoad === 'function') {\n                                onLoad(editor);\n                            }\n                        }}\n                        onChange={(evt) => {\n                            setRefreshUndoRedo(Date.now());\n                            if (typeof onValueUpdate === 'function') {\n                                onValueUpdate(evt.target.value);\n                            }\n                        }}\n                        editorProps={{ $blockScrolling: true }}\n                        width={editorWidth}\n                        height={editorHeight}\n                    />\n\n                </div>\n                {\n                    allowFileInput &&\n                    <div style={{ marginTop: 10 }}>\n                        <input type=\"file\" />\n                    </div>\n                }\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between'\n                    }}\n                >\n                    <div>\n                        <Select\n                            native\n                            style={{\n                                width: 220,\n                                height: 28,\n                                fontSize: 11\n                            }}\n                            value={selectedOperations[mode]}\n                            onChange={(e) => {\n                                const json = JSON.parse(JSON.stringify(selectedOperations));\n                                json[mode] = e.target.value;\n                                setSelectedOperations(json);\n                            }}\n                        >\n                            <option\n                                value=\"\"\n                                style={{ color: '#777' }}\n                            >\n                                -- Operations --\n                            </option>\n\n                            {\n                                mode === mode_css &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$css_sample_css}>\n                                            Sample CSS\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$css_formatCss}>\n                                            Format CSS\n                                        </option>\n                                        <option value={$css_minifyCss}>\n                                            Minify CSS\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$css_cssToScss}>\n                                            CSS to SCSS\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_list &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$list_sample_list}>\n                                            Sample list\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Lines\">\n                                        <option value={$list_removeEmptyLines}>\n                                            Remove empty lines\n                                        </option>\n                                        <option value={$list_removeDuplicates}>\n                                            Remove duplicates\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Sort\">\n                                        <option value={$list_sort}>\n                                            Sort\n                                        </option>\n                                        <option value={$list_caseInsensitiveSort}>\n                                            Case-insensitive sort\n                                        </option>\n                                        <option value={$list_naturalSort}>\n                                            Natural sort\n                                        </option>\n                                        <option value={$list_randomize}>\n                                            Randomize\n                                        </option>\n                                        <option value={$list_reverse}>\n                                            Reverse\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"String\">\n                                        <option value={$list_trimLines}>\n                                            Trim lines\n                                        </option>\n                                        <option value={$list_removeCommaCharacterAtLineEnds}>\n                                            Remove comma character at line ends\n                                        </option>\n                                        <option value={$list_removeQuoteAndApostropheCharacters}>\n                                            Remove &quot; and &apos; characters\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Stats\">\n                                        <option value={$list_getStats}>\n                                            Get Stats\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Transform\">\n                                        <option value={$list_linesToJsonArray}>\n                                            Lines to JSON Array\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_csv &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$csv_sample_csv}>\n                                            Sample CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Columns\">\n                                        <option value={$csv_removeFirstColumnFromCsv}>\n                                            Remove first column from CSV\n                                        </option>\n                                        <option value={$csv_removeLastColumnFromCsv}>\n                                            Remove last column from CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$csv_csvToJson}>\n                                            CSV to JSON\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_json &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$json_sample_json}>\n                                            Sample JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$json_formatJson}>\n                                            Format JSON\n                                        </option>\n                                        <option value={$json_minifyJson}>\n                                            Minify JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Edit\">\n                                        <option value={$json_removeProperty}>\n                                            Remove property\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Sort\">\n                                        <option value={$json_sortJson}>\n                                            Sort JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Fix\">\n                                        <option value={$json_fixDataTypes}>\n                                            Fix data types\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$json_jsonToLines}>\n                                            JSON to Lines\n                                        </option>\n                                        <option value={$json_jsonToCsv}>\n                                            JSON to CSV\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                        </Select>\n                    </div>\n                    <div style={{ marginLeft: 5 }}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"small\"\n                            startIcon={<CheckIcon />}\n                            disabled={operation === ''}\n                            onClick={async () => {\n                                const operationsByUser = [\n                                    operation,\n                                    ...recentOperations\n                                ];\n                                // Remove duplicate operations (keep the first occurrence)\n                                const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                    return operationsByUser.indexOf(operation) === index;\n                                });\n                                setRecentOperations(uniqueOperationsByUser);\n                                localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                const getInputValue = () => {\n                                    const value = editorRef.current.getValue();\n                                    return value;\n                                };\n                                const [err, output, extraInfo] = await performOperation({\n                                    getInputValue,\n                                    operation\n                                });\n\n                                if (err) {\n                                    console.error(err);\n                                    alert(err.message); // eslint-disable-line no-alert\n                                } else {\n                                    if (output === null) {\n                                        alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                    } else {\n                                        editorRef.current.setValue(output);\n                                        if (typeof onValueUpdate === 'function') {\n                                            onValueUpdate(output);\n                                        }\n                                    }\n                                }\n                            }}\n                        >\n                            Apply\n                        </Button>\n                    </div>\n                </div>\n                {\n                    recentOperations.length > 0 &&\n                    <div style={{ marginTop: 10 }}>\n                        <div\n                            style={{\n                                display: 'flex',\n                                backgroundColor: '#f5f5f5',\n                                border: '1px solid #e0e0e0',\n                                borderRadius: 999\n                            }}\n                        >\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', fontSize: 12 }}>\n                                <IconButton\n                                    size=\"small\"\n                                    title=\"Reset suggested operations\"\n                                    onClick={() => {\n                                        setRecentOperations(defaultRecommendedOperations);\n                                        localStorage.setItem('recentOperations', JSON.stringify([]));\n                                    }}\n                                >\n                                    <StarIcon style={{ fontSize: 16 }} />\n                                </IconButton>\n                            </div>\n                            <div\n                                style={{\n                                    borderRight: '1px solid #e0e0e0'\n                                }}\n                            ></div>\n                            <div\n                                style={{\n                                    backgroundColor: '#fff',\n                                    width: '100%',\n                                    borderTopRightRadius: 999,\n                                    borderBottomRightRadius: 999\n                                }}\n                            >\n                                <RecentOperations\n                                    editorRef={editorRef}\n                                    onValueUpdate={onValueUpdate}\n                                    mode={mode}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\nTextList.propTypes = {\n    placeholder: PropTypes.string,\n    onLoad: PropTypes.func,\n    onValueUpdate: PropTypes.func,\n    allowFileInput: PropTypes.bool,\n    style: PropTypes.object,\n    editorWidth: PropTypes.string,\n    editorHeight: PropTypes.string\n};\n\nexport { TextList };\n","// extracted by mini-css-extract-plugin\nexport default {\"ListOperations\":\"ListOperations__ListOperations--VCX0Q\"};","import React, { useRef } from 'react';\n\nimport {\n    intersection,\n    union,\n    difference\n} from 'lodash';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport SwapHorizontalCircleRoundedIcon from '@mui/icons-material/SwapHorizontalCircleRounded.js';\n\nimport Button from '@mui/material/Button/index.js';\n\nimport { TextList } from './TextList/TextList.js';\n\nimport styles from './ListOperations.css';\n\nconst performABToC = ({\n    editorARef,\n    editorBRef,\n    editorCRef,\n    operation\n}) => {\n    const valueA = editorARef.current.getValue();\n    const valueB = editorBRef.current.getValue();\n\n    const a = valueA.split('\\n');\n    const b = valueB.split('\\n');\n\n    let c = '';\n\n    if (operation === 'append') {\n        c = [...a, ...b];\n    } else if (operation === 'union') {\n        c = union(a, b);\n    } else if (operation === 'intersection') {\n        c = intersection(a, b);\n    } else if (operation === 'difference') {\n        c = difference(a, b);\n    }\n\n    const valueC = c.join('\\n');\n\n    // Update C\n    editorCRef.current.setValue(valueC);\n};\n\nconst ListOperations = function () {\n    const editorARef = useRef(null);\n    const editorBRef = useRef(null);\n    const editorCRef = useRef(null);\n\n    return (\n        <div className={styles.ListOperations}>\n            <div style={{ display: 'flex', justifyContent: 'center', minWidth: 1120 }}>\n                <div>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        A\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorARef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <IconButton\n                            variant=\"filled\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => {\n                                const valueA = editorARef.current.getValue();\n                                const valueB = editorBRef.current.getValue();\n\n                                // Swap values\n                                editorARef.current.setValue(valueB);\n                                editorBRef.current.setValue(valueA);\n                            }}\n                        >\n                            <SwapHorizontalCircleRoundedIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        B\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorBRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block' }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'append'\n                                });\n                            }}\n                        >\n                            A + B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'intersection'\n                                });\n                            }}\n                        >\n                            A ∩ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'union'\n                                });\n                            }}\n                        >\n                            A ∪ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'difference'\n                                });\n                            }}\n                        >\n                            A − B\n                        </Button>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        C\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Result of the operation will be available here\"\n                            onLoad={(editor) => {\n                                editorCRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { ListOperations };\n","import React from 'react';\n\nimport { ListOperations } from './ListOperations/ListOperations.js';\n\nimport styles from './Dashboard.css';\n\nconst Dashboard = () => {\n    return (\n        <div className={styles.Dashboard}>\n            <div style={{ marginTop: 45 }}>\n                <ListOperations />\n            </div>\n        </div>\n    );\n};\n\nexport { Dashboard };\n","// extracted by mini-css-extract-plugin\nexport default {\"Dashboard\":\"Dashboard__Dashboard--d2pNX\"};","import React from 'react';\n\nimport styles from './PageFooter.css';\n\nimport { CreatedByMessage } from 'generic-components/CreatedByMessage/CreatedByMessage.js';\n\nclass PageFooter extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageFooter}>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 45,\n                        marginBottom: 20\n                    }}\n                >\n                    <div>\n                        <div>\n                            <CreatedByMessage />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageFooter };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageFooter\":\"PageFooter__PageFooter--yI25Y\"};","import React from 'react';\n\nimport './styles-reset.css';\nimport './App.css';\n\nimport { PageHeader } from './PageHeader/PageHeader.js';\nimport { Dashboard } from './Dashboard/Dashboard.js';\nimport { PageFooter } from './PageFooter/PageFooter.js';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <PageHeader />\n                <div>\n                    <Dashboard />\n                </div>\n                <PageFooter />\n            </div>\n        );\n    }\n}\n\nexport { App };\n","/* eslint-disable filenames/no-index */\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client'; // eslint-disable-line node/file-extension-in-import\n\nimport './index.css';\n\nimport { App } from './App/App.js';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktransformers\"] = self[\"webpackChunktransformers\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [360,375], () => (__webpack_require__(28845)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","PageHeader","React","render","className","style","display","flexDirection","alignItems","marginTop","margin","textAlign","fontVariant","letterSpacing","fontSize","color","mode_css","mode_csv","mode_json","mode_list","$css_sample_css","$css_formatCss","$css_minifyCss","$css_cssToScss","$list_sample_list","$list_removeEmptyLines","$list_removeDuplicates","$list_sort","$list_caseInsensitiveSort","$list_naturalSort","$list_randomize","$list_reverse","$list_trimLines","$list_removeCommaCharacterAtLineEnds","$list_removeQuoteAndApostropheCharacters","$list_getStats","$list_linesToJsonArray","$csv_sample_csv","$csv_removeFirstColumnFromCsv","$csv_removeLastColumnFromCsv","$csv_csvToJson","$json_sample_json","$json_formatJson","$json_minifyJson","$json_removeProperty","$json_sortJson","$json_fixDataTypes","$json_jsonToLines","$json_jsonToCsv","defaultRecommendedOperations","IconNotAvailable","CircleIcon","availableOperations","message","Icon","AppRegistrationIcon","MoodIcon","CompressIcon","DataObjectIcon","FirstPageIcon","LastPageIcon","PlaylistRemoveIcon","CategoryIcon","BuildIcon","ReorderIcon","AppsIcon","SettingsEthernetIcon","CopyAllIcon","SortIcon","AbcIcon","ParkIcon","ShuffleOnIcon","KeyboardDoubleArrowDownIcon","CommitIcon","CleaningServicesIcon","FormatQuoteIcon","BarChartIcon","allOperationsById","mode","operationsForMode","operationId","id","allOperationIds","Object","keys","recentOperationsFromLocalStorage","localStorage","getItem","recentOperations","JSON","parse","Array","isArray","err","console","error","filter","operation","includes","recentOperationsAtom","atom","trimLine","line","trim","removeCommaCharacterAtEndFromLine","char","length","substring","removeMatchingCharacterAtEndFromLine","removeQuoteAndApostropheCharactersFromLine","replaceAll","removeLastColumnFromCsvLine","columns","split","pop","join","removeFirstColumnFromCsvLine","shift","traverseNode","root","transform","output","key","fixDataTypes","json","node","String","Number","map","item","performOperation","async","getInputValue","input","beautifyCss","minifyCss","cssToScss","alert","jsonInput","stringify","removePropertyRecursively","obj","propertyName","hasOwnProperty","forEach","prompt","Error","jsonStableStringify","space","every","push","ob","jsonToCsv","lines","removeFirstColumnFromCsvLines","removeLastColumnFromCsvLines","headers","i","j","column","csvToJson","x","removeEmptyLines","Set","removeDuplicates","sort","a","b","toLowerCase","localeCompare","undefined","numeric","Math","random","reverse","trimLines","removeCommaCharacterAtEndFromLines","removeQuoteAndApostropheCharactersFromLines","stats","linesCount","charactersCount","words","replace","wordsCount","uniqueWordsCount","size","RecentOperations","editorRef","onValueUpdate","setRecentOperations","useAtom","width","overflow","paddingLeft","index","IconButton","title","onClick","operationsByUser","uniqueOperationsByUser","indexOf","setItem","extraInfo","current","getValue","setValue","propTypes","PropTypes","copy","simpleText","navigator","clipboard","writeText","e","TextList","placeholder","onLoad","allowFileInput","editorWidth","editorHeight","setMode","useLocalStorage","raw","selectedOperations","setSelectedOperations","flagSyntaxHighlighting","setFlagSyntaxHighlighting","flagLineWrap","setFlagLineWrap","refreshUndoRedo","setRefreshUndoRedo","useState","Date","now","modeForSyntaxHighlighting","useRef","justifyContent","editor","selectedText","getSelectedText","selectAll","execCommand","ContentCut","ContentCopy","text","Backspace","disabled","getSession","getUndoManager","hasUndo","Undo","hasRedo","Redo","WrapText","blob","Blob","type","document","createElement","extension","href","URL","createObjectURL","localTimeAsPartOfFilename","getTimezoneOffset","toISOString","download","click","Save","BorderColorIcon","BorderColorOutlinedIcon","marginLeft","Select","native","value","height","onChange","target","setOptions","wrap","theme","evt","editorProps","$blockScrolling","label","Button","variant","startIcon","Check","backgroundColor","border","borderRadius","Star","borderRight","borderTopRightRadius","borderBottomRightRadius","performABToC","editorARef","editorBRef","editorCRef","valueA","valueB","c","union","intersection","difference","valueC","ListOperations","minWidth","fontFamily","SwapHorizontalCircleRounded","Dashboard","PageFooter","marginBottom","CreatedByMessage","App","container","getElementById","createRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdD","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","splice","r","n","getter","__esModule","d","getPrototypeOf","t","this","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","g","globalThis","Function","window","prop","prototype","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}