{"version":3,"file":"bundle.index.648509a1e8fc9682555f.js","mappings":"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","sources":["webpack://transformers/webpack/runtime/chunk loaded","webpack://transformers/webpack/runtime/create fake namespace object","webpack://transformers/webpack/runtime/load script","webpack://transformers/./src/App/Dashboard/MainEditor/before-loading-less.js","webpack://transformers/./src/App/PageHeader/PageHeader.js","webpack://transformers/./src/App/PageHeader/PageHeader.css?080f","webpack://transformers/./src/App/Dashboard/utils/getCurrentSearchParamsAsJson.js","webpack://transformers/./src/App/Dashboard/MainEditor/constOperations.js","webpack://transformers/./src/App/Dashboard/MainEditor/JotaiState.js","webpack://transformers/./src/App/Dashboard/MainEditor/textUtils.js","webpack://transformers/./src/App/Dashboard/MainEditor/performOperation.js","webpack://transformers/./src/App/Dashboard/MainEditor/RecentOperations.js","webpack://transformers/./src/App/Dashboard/MainEditor/MainEditor.css?5fab","webpack://transformers/./src/App/Dashboard/MainEditor/MainEditor.js","webpack://transformers/./src/App/Dashboard/SingleEditor/SingleEditor.js","webpack://transformers/./src/App/Dashboard/DoubleEditor/DoubleEditor.css?d54a","webpack://transformers/./src/App/Dashboard/DoubleEditor/DoubleEditor.js","webpack://transformers/./src/App/Dashboard/TripleEditor/TripleEditor.css?3bb2","webpack://transformers/./src/App/Dashboard/TripleEditor/TripleEditor.js","webpack://transformers/./src/App/Dashboard/ContentTabs/ContentTabs.js","webpack://transformers/./src/App/Dashboard/Dashboard.js","webpack://transformers/./src/App/Dashboard/Dashboard.css?d7b8","webpack://transformers/./src/App/PageFooter/PageFooter.js","webpack://transformers/./src/App/PageFooter/PageFooter.css?9170","webpack://transformers/./src/App/App.js","webpack://transformers/./src/index.js","webpack://transformers/webpack/bootstrap","webpack://transformers/webpack/runtime/amd define","webpack://transformers/webpack/runtime/compat get default export","webpack://transformers/webpack/runtime/define property getters","webpack://transformers/webpack/runtime/ensure chunk","webpack://transformers/webpack/runtime/get javascript chunk filename","webpack://transformers/webpack/runtime/get mini-css chunk filename","webpack://transformers/webpack/runtime/global","webpack://transformers/webpack/runtime/hasOwnProperty shorthand","webpack://transformers/webpack/runtime/make namespace object","webpack://transformers/webpack/runtime/node module decorator","webpack://transformers/webpack/runtime/publicPath","webpack://transformers/webpack/runtime/jsonp chunk loading","webpack://transformers/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"transformers:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t};\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","window.less = {\n    // To disable any attempt to transpile LESS to CSS from style tags with rel=\"stylesheet/less\" since that would\n    // lead to an unwanted console message saying: \"Less has finished and no sheets were loaded.\"\n    onReady: false\n};\n","import React from 'react';\n\nimport styles from './PageHeader.css';\n\nclass PageHeader extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageHeader}>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                        marginTop: 25\n                    }}\n                >\n                    <h1 style={{ margin: 0, textAlign: 'center' }}>\n                        <span style={{ fontVariant: 'small-caps' }}>\n                            <span style={{ letterSpacing: '0.05em', fontSize: '28px' }}>\n                                {'Transformers: '}\n                            </span>\n                        </span>\n                        <span style={{ fontVariant: 'small-caps' }}>\n                            <span style={{ letterSpacing: '0.05em' }}>\n                                Operations&nbsp;on&nbsp;the&nbsp;Text\n                            </span>\n                        </span>\n                    </h1>\n                    <h3 style={{ fontSize: 11, margin: '10px 0 0 0', color: '#555', textAlign: 'center' }}>\n                        Operations for Lists, Sets, CSV, JSON, etc\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageHeader };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageHeader\":\"PageHeader__PageHeader--AAWQ1\"};","const getCurrentSearchParamsAsJson = () => {\n    const params = new URLSearchParams(window.location.search);\n    const ob = {};\n    for (const param of params) {\n        ob[param[0]] = param[1];\n    }\n\n    return ob;\n};\n\nexport { getCurrentSearchParamsAsJson };\n","// import React from 'react';\n\nimport CircleIcon from '@mui/icons-material/Circle.js';\n\nimport AppRegistrationIcon from '@mui/icons-material/AppRegistration.js';\n\nimport CompressIcon from '@mui/icons-material/Compress.js';\n\nimport DataObjectIcon from '@mui/icons-material/DataObject.js';\n\nimport SettingsEthernetIcon from '@mui/icons-material/SettingsEthernet.js';\nimport CopyAllIcon from '@mui/icons-material/CopyAll.js';\n// import RestaurantIcon from '@mui/icons-material/Restaurant.js';\n\nimport SortIcon from '@mui/icons-material/Sort.js';\nimport AbcIcon from '@mui/icons-material/Abc.js';\nimport ParkIcon from '@mui/icons-material/Park.js';\nimport ShuffleOnIcon from '@mui/icons-material/ShuffleOn.js';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown.js';\n\nimport CommitIcon from '@mui/icons-material/Commit.js';\nimport CleaningServicesIcon from '@mui/icons-material/CleaningServices.js';\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote.js';\n\nimport ReorderIcon from '@mui/icons-material/Reorder.js';\nimport AppsIcon from '@mui/icons-material/Apps.js';\nimport MoodIcon from '@mui/icons-material/Mood.js';\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove.js';\nimport CategoryIcon from '@mui/icons-material/Category.js';\n\nimport BuildIcon from '@mui/icons-material/Build.js';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage.js';\nimport LastPageIcon from '@mui/icons-material/LastPage.js';\n\n// import VerticalAlignTopIcon from '@mui/icons-material/VerticalAlignTop.js';\n// import VerticalAlignBottomIcon from '@mui/icons-material/VerticalAlignBottom.js';\n\nimport BarChartIcon from '@mui/icons-material/BarChart.js';\n// import FormatListNumberedRtlIcon from '@mui/icons-material/FormatListNumberedRtl.js';\n// import SubtitlesIcon from '@mui/icons-material/Subtitles.js';\n// import SubtitlesOutlinedIcon from '@mui/icons-material/SubtitlesOutlined.js';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    mode_css = 'css',\n    mode_csv = 'csv',\n    mode_json = 'json',\n    mode_less = 'less',\n    mode_list = 'list';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    modes = [\n        mode_css,\n        mode_csv,\n        mode_json,\n        mode_less,\n        mode_list\n    ];\n\n// eslint-disable-next-line import/exports-last\nexport const\n    $css_formatCss                           = '$css_formatCss',\n    $css_minifyCss                           = '$css_minifyCss',\n\n    $css_cssToScss                           = '$css_cssToScss',\n\n    $list_removeEmptyLines                   = '$list_removeEmptyLines',\n    $list_removeDuplicates                   = '$list_removeDuplicates',\n    // $list_removeBeyondNLines              = '$list_removeBeyondNLines',\n\n    $list_sort                               = '$list_sort',\n    $list_caseInsensitiveSort                = '$list_caseInsensitiveSort',\n    $list_naturalSort                        = '$list_naturalSort',\n    $list_randomize                          = '$list_randomize',\n    $list_reverse                            = '$list_reverse',\n\n    $list_trimLines                          = '$list_trimLines',\n    $list_removeCommaCharacterAtLineEnds     = '$list_removeCommaCharacterAtLineEnds',\n    $list_removeQuoteAndApostropheCharacters = '$list_removeQuoteAndApostropheCharacters',\n\n    $list_getStats                           = '$list_getStats',\n    // $list_countLines                      = '$list_countLines',\n    // $list_countCharacters                 = '$list_countCharacters',\n    // $list_countWords                      = '$list_countWords',\n    // $list_countUniqueWords                = '$list_countUniqueWords',\n\n    $list_linesToJsonArray                   = '$list_linesToJsonArray',\n\n    $csv_removeFirstColumnFromCsv            = '$csv_removeFirstColumnFromCsv',\n    $csv_removeLastColumnFromCsv             = '$csv_removeLastColumnFromCsv',\n\n    $csv_csvToJson                           = '$csv_csvToJson',\n\n    $json_formatJson                         = '$json_formatJson',\n    $json_minifyJson                         = '$json_minifyJson',\n\n    $json_removeProperty                     = '$json_removeProperty',\n\n    $json_sortJson                           = '$json_sortJson',\n\n    $json_fixDataTypes                       = '$json_fixDataTypes',\n\n    // $json_removeFirstProperty             = '$json_removeFirstProperty',\n    // $json_removeLastProperty              = '$json_removeLastProperty',\n\n    $json_jsonToLines                        = '$json_jsonToLines',\n    $json_jsonToCsv                          = '$json_jsonToCsv',\n\n    $less_formatLess                         = '$less_formatLess',\n    $less_minifyLess                         = '$less_minifyLess',\n\n    $less_lessToCss                          = '$less_lessToCss';\n\n\n// eslint-disable-next-line import/exports-last\nexport const defaultRecommendedOperations = [\n    $css_formatCss,\n    $csv_csvToJson,\n    $json_formatJson,\n    $less_formatLess,\n    $list_sort\n];\n\n// eslint-disable-next-line import/exports-last\nexport const defaultSelectedOperations = {\n    [mode_css]: '',\n    [mode_csv]: '',\n    [mode_json]: '',\n    [mode_less]: '',\n    [mode_list]: ''\n};\n\n// eslint-disable-next-line import/exports-last\nexport const IconNotAvailable = CircleIcon;\n\nconst\n    availableOperations = {\n        [mode_css]: {\n            [$css_formatCss]                           : { message: 'Format CSS',                             Icon: MoodIcon },\n            [$css_minifyCss]                           : { message: 'Minify CSS',                             Icon: CompressIcon },\n\n            [$css_cssToScss]                           : { message: 'CSS to SCSS',                            Icon: DataObjectIcon }\n        },\n        [mode_csv]: {\n            [$csv_removeFirstColumnFromCsv]            : { message: 'Remove first column from CSV',           Icon: FirstPageIcon },\n            [$csv_removeLastColumnFromCsv]             : { message: 'Remove last column from CSV',            Icon: LastPageIcon },\n\n            [$csv_csvToJson]                           : { message: 'CSV to JSON',                            Icon: DataObjectIcon }\n        },\n        [mode_json]: {\n            [$json_formatJson]                         : { message: 'Format JSON',                            Icon: MoodIcon },\n            [$json_minifyJson]                         : { message: 'Minify JSON',                            Icon: CompressIcon },\n\n            [$json_removeProperty]                     : { message: 'Remove property',                        Icon: PlaylistRemoveIcon },\n\n            [$json_sortJson]                           : { message: 'Sort JSON',                              Icon: CategoryIcon },\n\n            [$json_fixDataTypes]                       : { message: 'Fix data types',                         Icon: BuildIcon },\n\n            // [$json_removeFirstProperty]             : { message: 'Remove first property',                  Icon: VerticalAlignTopIcon },\n            // [$json_removeLastProperty]              : { message: 'Remove last property',                   Icon: VerticalAlignBottomIcon },\n\n            [$json_jsonToLines]                        : { message: 'JSON to lines',                          Icon: ReorderIcon },\n            [$json_jsonToCsv]                          : { message: 'JSON to CSV',                            Icon: AppsIcon }\n        },\n        [mode_less]: {\n            [$less_formatLess]                         : { message: 'Format LESS',                            Icon: MoodIcon },\n            [$less_minifyLess]                         : { message: 'Minify LESS',                            Icon: CompressIcon },\n\n            [$less_lessToCss]                          : { message: 'LESS to CSS',                            Icon: DataObjectIcon }\n        },\n        [mode_list]: {\n            [$list_removeEmptyLines]                   : { message: 'Remove empty lines',                     Icon: SettingsEthernetIcon },\n            [$list_removeDuplicates]                   : { message: 'Remove duplicates',                      Icon: CopyAllIcon },\n            // [$list_removeBeyondNLines]              : { message: 'Remove beyond N lines',                  Icon: RestaurantIcon },\n\n            [$list_sort]                               : { message: 'Sort',                                   Icon: SortIcon },\n            [$list_caseInsensitiveSort]                : { message: 'Case-insensitive sort',                  Icon: AbcIcon },\n            [$list_naturalSort]                        : { message: 'Natural sort',                           Icon: ParkIcon },\n            [$list_randomize]                          : { message: 'Randomize',                              Icon: ShuffleOnIcon },\n            [$list_reverse]                            : { message: 'Reverse',                                Icon: KeyboardDoubleArrowDownIcon },\n\n            [$list_trimLines]                          : { message: 'Trim lines',                             Icon: CommitIcon },\n            [$list_removeCommaCharacterAtLineEnds]     : { message: 'Remove comma character at line ends',    Icon: CleaningServicesIcon },\n            [$list_removeQuoteAndApostropheCharacters] : { message: 'Remove quote and apostrophe characters', Icon: FormatQuoteIcon },\n\n            [$list_getStats]                           : { message: 'Get stats',                              Icon: BarChartIcon },\n            // [$list_countLines]                      : { message: 'Count lines',                            Icon: FormatListNumberedRtlIcon },\n            // [$list_countCharacters]                 : { message: 'Count characters',                       Icon: AbcIcon },\n            // [$list_countWords]                      : { message: 'Count words',                            Icon: SubtitlesIcon },\n            // [$list_countUniqueWords]                : { message: 'Count unique words',                     Icon: SubtitlesOutlinedIcon },\n\n            [$list_linesToJsonArray]                   : { message: 'Lines to JSON Array',                    Icon: DataObjectIcon }\n        }\n    };\n\nconst allOperationsById = {};\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        allOperationsById[operationId] = operationsForMode[operationId];\n    }\n}\n\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        operationsForMode[operationId].id = operationId;\n    }\n}\n\nconst allOperationIds = Object.keys(allOperationsById);\n\nexport {\n    availableOperations,\n    allOperationsById,\n    allOperationIds\n};\n","import { atom } from 'jotai';\n\nimport {\n    allOperationIds,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nconst recentOperationsFromLocalStorage = localStorage.getItem('recentOperations');\n\nlet recentOperations = [];\ntry {\n    recentOperations = JSON.parse(recentOperationsFromLocalStorage);\n    if (!Array.isArray(recentOperations)) {\n        recentOperations = defaultRecommendedOperations;\n    }\n} catch (err) {\n    console.error(err);\n}\n\n// Remove operations that are not available anymore with that name\nrecentOperations.filter(operation => {\n    return allOperationIds.includes(operation);\n});\n\nconst recentOperationsAtom = atom(recentOperations);\n\nexport { recentOperationsAtom };\n","import jsonStableStringify from 'json-stable-stringify';\n\nconst removeEmptyLines = function (lines) {\n    const output = lines.filter((x) => {\n        return x;\n    });\n    return output;\n};\n\nconst removeDuplicates = function (lines) {\n    const output = [...new Set(lines)];\n    return output;\n};\n\nconst trimLine = (line) => {\n    return line.trim();\n};\nconst trimLines = function (lines) {\n    const output = lines.map(trimLine);\n    return output;\n};\n\nconst removeMatchingCharacterAtEndFromLine = function (line, char) {\n    if (line[line.length - 1] === char) {\n        return line.substring(0, line.length - 1);\n    }\n    return line;\n};\n\nconst removeCommaCharacterAtEndFromLine = function (line) {\n    return removeMatchingCharacterAtEndFromLine(line, ',');\n};\n\nconst removeCommaCharacterAtEndFromLines = function (lines) {\n    const output = lines.map(removeCommaCharacterAtEndFromLine);\n    return output;\n};\n\nconst removeQuoteAndApostropheCharactersFromLine = function (line) {\n    return (\n        line\n            .replaceAll('\"', '')\n            .replaceAll(\"'\", '')\n    );\n};\nconst removeQuoteAndApostropheCharactersFromLines = function (lines) {\n    const output = lines.map(removeQuoteAndApostropheCharactersFromLine);\n    return output;\n};\n\nconst removeLastColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.pop();\n    return columns.join(',');\n};\nconst removeLastColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeLastColumnFromCsvLine);\n    return output;\n};\n\nconst removeFirstColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.shift();\n    const output = columns.join(',');\n    return output;\n};\nconst removeFirstColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeFirstColumnFromCsvLine);\n    return output;\n};\n\nconst csvToJson = function (lines) {\n    const output = ['['];\n    const headers = lines[0].split(',');\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const columns = line.split(',');\n        const obj = {};\n\n        // eslint-disable-next-line unicorn/no-for-loop\n        for (let j = 0; j < columns.length; j++) {\n            const column = columns[j];\n            const header = headers[j];\n            obj[header] = column;\n        }\n        if (i < lines.length - 1) {\n            output.push('\\t' + JSON.stringify(obj) + ',');\n        } else {\n            output.push('\\t' + JSON.stringify(obj));\n        }\n    }\n    output.push(']');\n    return output;\n};\n\nconst traverseNode = function (root, transform) {\n    const output = transform(root);\n\n    if (typeof output === 'object') {\n        for (const key in output) {\n            output[key] = traverseNode(output[key], transform);\n        }\n    }\n\n    return output;\n};\n\nconst fixDataTypes = function (json) {\n    const output = traverseNode(json, function (node) {\n        if (typeof node === 'string') {\n            if (node === 'true') {\n                node = true;\n            } else if (node === 'false') {\n                node = false;\n            } else if (node === 'null') {\n                node = null;\n            } else if (String(Number(node)) === node) {\n                if (\n                    String(Number(node)) === 'Infinity' ||\n                    String(Number(node)) === '-Infinity' ||\n                    String(Number(node)) === 'NaN'\n                ) {\n                    // Do nothing\n                } else {\n                    node = Number(node);\n                }\n            }\n        } else if (Array.isArray(node)) {\n            node = node.map(item => {\n                return fixDataTypes(item);\n            });\n        } else if (typeof node === 'object') {\n            for (const key in node) {\n                node[key] = fixDataTypes(node[key]);\n            }\n        }\n\n        return node;\n    });\n\n    return output;\n};\n\nconst jsonToCsv = function (json) {\n    const line = [];\n    const output = [];\n\n    const keys = Object.keys(json[0]);\n    for (const key of keys) {\n        line.push(key);\n    }\n    output.push(line.join(','));\n\n    for (const ob of json) {\n        const line = [];\n        for (const key of keys) {\n            line.push(ob[key]);\n        }\n        output.push(line.join(','));\n    }\n\n    return output.join('\\n');\n};\n\nexport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n};\n","import {\n    beautifyCss,\n    cssToScss,\n    minifyCss\n} from 'helpmate-css/dist/index.js';\n\nimport './before-loading-less.js';\n\nimport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n} from './textUtils.js';\n\nimport {\n    $css_cssToScss,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    $less_formatLess,\n    $less_minifyLess,\n\n    $less_lessToCss\n} from './constOperations.js';\n\nconst lazyLoadLess = async () => {\n    const less = await import('less');\n    return less;\n};\n\nconst performOperation = async function ({ getInputValue, operation }) {\n    try {\n        if (\n            [\n                $css_formatCss,\n                $css_minifyCss,\n                $css_cssToScss,\n                $less_formatLess,\n                $less_minifyLess,\n                $less_lessToCss\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            let output;\n            let err = null;\n            const extraInfo = {};\n\n            switch (operation) {\n                case $css_formatCss:\n                    output = beautifyCss(input);\n                    break;\n                case $css_minifyCss:\n                    output = minifyCss(input);\n                    break;\n                case $css_cssToScss:\n                    if (input.trim() === '') {\n                        output = input;\n                    } else {\n                        output = cssToScss(input);\n\n                        // TODO: Identify and add note about in which case this might happen\n                        if (output === 'Error: no source supplied to csspretty.') {\n                            // eslint-disable-next-line no-alert\n                            alert('Sorry! The CSS to SCSS conversion failed.\\n\\nPlease try again with some simpler syntax.');\n                        }\n                    }\n                    break;\n                case $less_formatLess:\n                    output = beautifyCss(input);\n                    break;\n                case $less_minifyLess:\n                    output = minifyCss(input);\n                    break;\n\n                case $less_lessToCss:\n                    if (input.trim() === '') {\n                        output = input;\n                    } else {\n                        try {\n                            const less = await lazyLoadLess();\n\n                            const renderedOutput = await less.render(input);\n                            output = renderedOutput.css;\n\n                            // By default, \"less.render()\" provides the output with indentation of 2 space characters\n                            output = beautifyCss(output);\n                        } catch (e) {\n                            err = new Error(e.message + `\\n(Line ${e.line}, Column ${e.column}) / (Character ${e.index})`);\n                            output = null;\n\n                            const moveCursorTo = {\n                                row: e.line - 1,\n                                column: e.column,\n\n                                position: e.index\n                            };\n                            extraInfo.moveCursorTo = moveCursorTo;\n                        }\n                    }\n                    break;\n            }\n\n            return [err, output, extraInfo];\n        } else if (\n            [\n                $json_formatJson,\n                $json_minifyJson,\n                $json_removeProperty,\n                $json_sortJson,\n                $json_fixDataTypes,\n                $json_jsonToLines,\n                $json_jsonToCsv\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const jsonInput = JSON.parse(input);\n            let output;\n\n            switch (operation) {\n                case $json_formatJson:\n                    output = JSON.stringify(jsonInput, null, '\\t');\n                    break;\n                case $json_minifyJson:\n                    output = JSON.stringify(jsonInput);\n                    break;\n                case $json_removeProperty:\n                    // Just a block\n                    {\n                        // Remove a property from a JSON object recursively\n                        // TODO: Optimize this function\n                        // TODO: Verify that this function works as expected for all cases\n                        const removePropertyRecursively = (obj, propertyName) => {\n                            // eslint-disable-next-line no-prototype-builtins\n                            if (obj.hasOwnProperty(propertyName)) {\n                                delete obj[propertyName];\n                            } else {\n                                Object.keys(obj).forEach(key => {\n                                    if (typeof obj[key] === 'object') {\n                                        removePropertyRecursively(obj[key], propertyName);\n                                    } else if (Array.isArray(obj[key])) {\n                                        obj[key].forEach(item => {\n                                            if (typeof item === 'object') {\n                                                removePropertyRecursively(item, propertyName);\n                                            } else {\n                                                // Do nothing\n                                            }\n                                        });\n                                    } else {\n                                        // Do nothing\n                                    }\n                                });\n                            }\n                        };\n\n                        // eslint-disable-next-line no-alert\n                        const propertyName = prompt('Please enter the name of the property to remove:');\n                        if (propertyName) {\n                            removePropertyRecursively(jsonInput, propertyName);\n                            output = JSON.stringify(jsonInput, null, '\\t');\n                        } else {\n                            return [new Error('Please provide a property name.')];\n                        }\n                    }\n                    break;\n                case $json_sortJson:\n                    output = jsonStableStringify(jsonInput, { space: '\\t' });\n                    break;\n                case $json_fixDataTypes:\n                    output = fixDataTypes(jsonInput);\n                    output = JSON.stringify(output, null, '\\t');\n                    break;\n                case $json_jsonToLines:\n                    if (\n                        Array.isArray(jsonInput) &&\n                        jsonInput.every(item => typeof item === 'string')\n                    ) {\n                        output = jsonInput.join('\\n');\n                    } else {\n                        return [new Error('Please provide an Array of Strings as the input.')];\n                    }\n                    break;\n                case $json_jsonToCsv:\n                    output = jsonToCsv(jsonInput);\n                    break;\n            }\n\n            return [null, output];\n        } else if (\n            [\n                $list_getStats\n            ].includes(operation)\n        ) {\n            switch (operation) {\n                case $list_getStats:\n                {\n                    const stats = {};\n\n                    const input = getInputValue();\n                    const lines = input.split('\\n');\n                    stats.linesCount = lines.length;\n                    stats.charactersCount = input.length;\n\n                    // Replace all punctuation characters with a single space\n                    const inputWithoutPunctuation = input.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, ' '); // eslint-disable-line no-useless-escape\n\n                    // Replace all continuous whitespace characters with a single space\n                    const inputWithoutWhitespace = inputWithoutPunctuation.replace(/\\s+/g, ' ');\n\n                    const words = inputWithoutWhitespace.split(' ');\n                    stats.wordsCount = words.length; // Not a perfect way to count words, but it's good enough for now.\n\n                    stats.uniqueWordsCount = (new Set(words)).size;\n\n                    return [null, null, { stats }];\n                }\n            }\n        } else if (\n            [\n                $csv_removeFirstColumnFromCsv,\n                $csv_removeLastColumnFromCsv,\n\n                $csv_csvToJson,\n\n                $list_removeEmptyLines,\n                $list_removeDuplicates,\n\n                $list_sort,\n                $list_caseInsensitiveSort,\n                $list_naturalSort,\n                $list_randomize,\n                $list_reverse,\n\n                $list_trimLines,\n                $list_removeCommaCharacterAtLineEnds,\n                $list_removeQuoteAndApostropheCharacters,\n\n                $list_linesToJsonArray\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const lines = input.split('\\n');\n\n            let output = lines;\n\n            switch (operation) {\n                case $csv_removeFirstColumnFromCsv:\n                    output = removeFirstColumnFromCsvLines(lines);\n                    break;\n                case $csv_removeLastColumnFromCsv:\n                    output = removeLastColumnFromCsvLines(lines);\n                    break;\n\n                case $csv_csvToJson:\n                    output = csvToJson(lines);\n                    break;\n\n                case $list_removeEmptyLines:\n                    output = removeEmptyLines(lines);\n                    break;\n                case $list_removeDuplicates:\n                    output = removeDuplicates(lines);\n                    break;\n\n                case $list_sort:\n                    lines.sort(); // TODO: We may want to use \".toSorted()\" when it becomes available in modern browsers (though performance-wise it may actually be disadvantageous).\n                    output = lines;\n                    break;\n                case $list_caseInsensitiveSort:\n                    lines.sort((a, b) => {\n                        return a.toLowerCase().localeCompare(b.toLowerCase());\n                    });\n                    output = lines;\n                    break;\n                case $list_naturalSort:\n                    lines.sort((a, b) => {\n                        return a.localeCompare(b, undefined, { numeric: true });\n                    });\n                    output = lines;\n                    break;\n                case $list_randomize:\n                    lines.sort(() => Math.random() - 0.5);\n                    output = lines;\n                    break;\n                case $list_reverse:\n                    lines.reverse();\n                    output = lines;\n                    break;\n\n                case $list_trimLines:\n                    output = trimLines(lines);\n                    break;\n                case $list_removeCommaCharacterAtLineEnds:\n                    output = removeCommaCharacterAtEndFromLines(lines);\n                    break;\n                case $list_removeQuoteAndApostropheCharacters:\n                    output = removeQuoteAndApostropheCharactersFromLines(lines);\n                    break;\n\n                case $list_linesToJsonArray:\n                    output = JSON.stringify(lines, null, '\\t');\n                    output = output.split('\\n');\n                    break;\n            }\n\n            const finalOutput = output.join('\\n');\n            return [null, finalOutput];\n        } else {\n            return [new Error(`Error: Implementation is not available for operation: ${operation}`)];\n        }\n    } catch (err) {\n        return [err];\n    }\n};\n\nexport { performOperation };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useAtom } from 'jotai';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\n\nimport {\n    IconNotAvailable,\n\n    availableOperations,\n    allOperationsById\n} from './constOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nconst RecentOperations = function ({\n    editorRef,\n    onValueUpdate,\n    mode\n}) {\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                width: 291,\n                overflow: 'hidden',\n                paddingLeft: 10\n            }}\n        >\n            {\n                recentOperations\n                    .filter(operation => {\n                        const operationsForMode = availableOperations[mode];\n                        return operationsForMode[operation];\n                    })\n                    .map((operation, index) => {\n                        const operationsForMode = availableOperations[mode];\n                        return (\n                            <div key={index}>\n                                <IconButton\n                                    size=\"small\"\n                                    title={(\n                                        operationsForMode[operation]?.message ||\n                                        operation\n                                    )}\n                                    onClick={async () => {\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const operationsByUser = [\n                                            operation,\n                                            ...recentOperations\n                                        ];\n                                        // Remove duplicate operations (keep the first occurrence)\n                                        const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                            return operationsByUser.indexOf(operation) === index;\n                                        });\n                                        setRecentOperations(uniqueOperationsByUser);\n                                        localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const getInputValue = () => {\n                                            const value = editorRef.current.getValue();\n                                            return value;\n                                        };\n                                        const [err, output, extraInfo] = await performOperation({\n                                            getInputValue,\n                                            operation\n                                        });\n\n                                        if (err) {\n                                            console.error(err);\n                                            alert(err.message); // eslint-disable-line no-alert\n                                        } else {\n                                            if (output === null) {\n                                                alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                            } else {\n                                                editorRef.current.setValue(output);\n                                                if (typeof onValueUpdate === 'function') {\n                                                    onValueUpdate(output);\n                                                }\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {(() => {\n                                        let Icon = allOperationsById[operation]?.Icon;\n                                        if (!Icon) {\n                                            Icon = IconNotAvailable;\n                                        }\n                                        return <Icon style={{ fontSize: 16 }} />;\n                                    })()}\n                                </IconButton>\n                            </div>\n                        );\n                    })\n            }\n        </div>\n    );\n};\nRecentOperations.propTypes = {\n    editorRef: PropTypes.object.isRequired,\n    onValueUpdate: PropTypes.func,\n    mode: PropTypes.string.isRequired\n};\n\nexport { RecentOperations };\n","// extracted by mini-css-extract-plugin\nexport default {\"MainEditor\":\"MainEditor__MainEditor--Q_tBg\",\"translucentWithoutHover\":\"MainEditor__translucentWithoutHover--GBmBJ\"};","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useSearchParams  } from 'react-router-dom';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver.js'; // https://github.com/securingsincity/react-ace/issues/725#issuecomment-543109155\nimport 'ace-builds/src-noconflict/mode-css.js';\nimport 'ace-builds/src-noconflict/mode-json.js';\nimport 'ace-builds/src-noconflict/theme-github.js';\n// import 'ace-builds/src-noconflict/ext-language_tools.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport Button from '@mui/material/Button/index.js';\n\nimport ScienceIcon from '@mui/icons-material/Science.js';\n\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined.js';\nimport BorderColorIcon from '@mui/icons-material/BorderColor.js';\n\nimport ContentCutIcon from '@mui/icons-material/ContentCut.js';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy.js';\nimport BackspaceIcon from '@mui/icons-material/Backspace.js';\nimport UndoIcon from '@mui/icons-material/Undo.js';\nimport RedoIcon from '@mui/icons-material/Redo.js';\nimport WrapTextIcon from '@mui/icons-material/WrapText.js';\nimport SaveIcon from '@mui/icons-material/Save.js';\n\nimport Select from '@mui/material/Select/index.js';\n\nimport CheckIcon from '@mui/icons-material/Check.js';\n\nimport StarIcon from '@mui/icons-material/Star.js';\n\nimport { useAtom } from 'jotai';\n\nimport { useLocalStorage } from 'react-use';\n\nimport { useSnackbar } from 'notistack';\n\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport { getCurrentSearchParamsAsJson } from '../utils/getCurrentSearchParamsAsJson.js';\n\nimport {\n    mode_css,\n    mode_csv,\n    mode_json,\n    mode_less,\n    mode_list,\n\n    modes,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $css_cssToScss,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    $less_formatLess,\n    $less_minifyLess,\n\n    $less_lessToCss,\n\n    defaultRecommendedOperations,\n\n    defaultSelectedOperations\n} from './constOperations.js';\n\nimport { RecentOperations } from './RecentOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nimport styles from './MainEditor.css';\n\nconst copy = async function (simpleText) {\n    try {\n        await navigator.clipboard.writeText(simpleText);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst generateTargetSearchParamsAsJson = ({ mode, operation, selectedOperations }) => {\n    const currentSearchParams = getCurrentSearchParamsAsJson();\n    const targetSearchParams = { ...currentSearchParams };\n\n    if (!targetSearchParams.mode) {\n        delete targetSearchParams.mode;\n    }\n    if (mode) {\n        targetSearchParams.mode = mode;\n    }\n\n    if (\n        !targetSearchParams.operation ||\n        !selectedOperations[mode] ||\n        operation === ''\n    ) {\n        delete targetSearchParams.operation;\n    }\n    if (operation) {\n        targetSearchParams.operation = operation;\n    }\n\n    return targetSearchParams;\n};\n\nconst getSanitizedModeWithStatus = (mode) => {\n    if (modes.indexOf(mode) >= 0) {\n        return {\n            wasAlreadyClean: true,\n            mode\n        };\n    } else {\n        return {\n            wasAlreadyClean: false,\n            mode: mode_list\n        };\n    }\n};\n\nconst MainEditor = function ({\n    placeholder,\n    onLoad,\n    onValueUpdate,\n    allowFileInput,\n    style,\n    editorWidth,\n    editorHeight,\n    autoApply,\n    onComputeOutput,\n    hideOperations\n}) {\n    const { enqueueSnackbar } = useSnackbar();\n\n    const [storedMode, setStoredMode] = useLocalStorage('mode', mode_list, { raw: true });\n    const [mode, setMode] = useState(\n        getSanitizedModeWithStatus(storedMode).mode\n    );\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    useEffect(\n        () => {\n            const modeFromSearchParams = searchParams.get('mode');\n            const sanitizedModeWithStatus = getSanitizedModeWithStatus(modeFromSearchParams);\n\n            if (sanitizedModeWithStatus.wasAlreadyClean) {\n                setStoredMode(modeFromSearchParams);\n                setMode(modeFromSearchParams);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [] // This useEffect() should run only once (at the time of mounting)\n    );\n\n    const [storedOperations, setStoredOperations] = useLocalStorage(\n        'selectedOperations',\n        JSON.parse(JSON.stringify(defaultSelectedOperations))\n    );\n\n    const selectedOperations = (() => {\n        if (storedOperations) {\n            return storedOperations;\n        } else {\n            return JSON.parse(JSON.stringify(defaultSelectedOperations));\n        }\n    })();\n\n    const operation = selectedOperations[mode];\n\n    const [flagSyntaxHighlighting, setFlagSyntaxHighlighting] = useLocalStorage('flagSyntaxHighlighting', 'yes', { raw: true });\n\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    const [flagLineWrap, setFlagLineWrap] = useLocalStorage('flagLineWrap', 'yes', { raw: true });\n\n    const [refreshUndoRedo, setRefreshUndoRedo] = useState(Date.now());\n\n    const modeForSyntaxHighlighting = (() => {\n        if (flagSyntaxHighlighting === 'yes') {\n            switch (mode) {\n                case mode_css:\n                    return 'css';\n                case mode_csv:\n                    return 'text';\n                case mode_json:\n                    return 'json';\n                case mode_less:\n                    return 'less';\n                case mode_list:\n                    return 'text';\n                default:\n                    return 'text';\n            }\n        } else {\n            return 'text';\n        }\n    })();\n\n    // Save \"editor\" reference for later usage.\n    const editorRef = useRef(null);\n\n    // The \"onChange\" event may get called twice because of the auto-format functionality. Hence, using this \"debounced\"\n    // function to avoid multiple calls (notifications).\n    const debouncedEnqueueSnackbar = useDebouncedCallback(\n        (errMessage) => {\n            enqueueSnackbar(errMessage);\n        },\n        32\n    );\n\n    const debouncedOnChange = useDebouncedCallback(\n        async (val, delta) => {\n            setRefreshUndoRedo(Date.now());\n\n            if (autoApply) {\n                if (operation) { // Operation might be empty (if the user has not selected any operation)\n                    await applyTheOperation();\n                }\n            }\n        },\n        750\n    );\n\n    const applyTheOperation = async () => {\n        const operationsByUser = [\n            operation,\n            ...recentOperations\n        ];\n        // Remove duplicate operations (keep the first occurrence)\n        const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n            return operationsByUser.indexOf(operation) === index;\n        });\n        setRecentOperations(uniqueOperationsByUser);\n        localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n        const getInputValue = () => {\n            const value = editorRef.current.getValue();\n            return value;\n        };\n        const [err, output, extraInfo] = await performOperation({\n            getInputValue,\n            operation\n        });\n\n        if (err) {\n            console.error(err);\n            debouncedEnqueueSnackbar(err.message);\n\n            if (extraInfo && extraInfo.moveCursorTo) {\n                // editorRef.current.moveCursorTo(\n                //     extraInfo.moveCursorTo.row,\n                //     extraInfo.moveCursorTo.column\n                // );\n                editorRef.current.moveCursorToPosition({\n                    row: extraInfo.moveCursorTo.row,\n                    column: extraInfo.moveCursorTo.column\n                });\n\n                editorRef.current.focus();\n            }\n        } else {\n            if (output === null) {\n                const extraInfoString = JSON.stringify(extraInfo, null, '\\t');\n                console.error(extraInfoString);\n                debouncedEnqueueSnackbar(extraInfoString);\n            } else {\n                if (typeof onComputeOutput === 'function') {\n                    onComputeOutput({\n                        operation,\n                        output\n                    });\n                } else {\n                    editorRef.current.setValue(output);\n                }\n                if (typeof onValueUpdate === 'function') {\n                    onValueUpdate(output);\n                }\n            }\n        }\n    };\n\n    return (\n        <div style={style} className={styles.MainEditor}>\n            <div style={{ marginTop: 10 }}>\n                <div\n                    className={styles.translucentWithoutHover}\n                    style={{ display: 'flex', justifyContent: 'space-between' }}\n                >\n                    <div style={{ display: 'flex' }}>\n                        {/* Cut button */}\n                        <IconButton\n                            title=\"Cut\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform cut operation\n                                    editor.execCommand('cut');\n                                }\n                            }}\n                        >\n                            <ContentCutIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Copy button */}\n                        <IconButton\n                            title=\"Copy\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform copy operation\n                                    editor.execCommand('copy');\n                                }\n                            }}\n                        >\n                            <ContentCopyIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Clear button */}\n                        <IconButton\n                            title=\"Clear\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    const selectedText = editor.getSelectedText();\n\n                                    if (selectedText) {\n                                        // If there is selected text, then clear only the selected text.\n                                        editor.execCommand('inserttext', { text: '' });\n                                    } else {\n                                        editor.setValue('');\n                                    }\n                                }\n                            }}\n                        >\n                            <BackspaceIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Undo button */}\n                        <IconButton\n                            title=\"Undo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasUndo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('undo');\n                                }\n                            }}\n                        >\n                            <UndoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Redo button */}\n                        <IconButton\n                            title=\"Redo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasRedo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('redo');\n                                }\n                            }}\n                        >\n                            <RedoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Line wrap button */}\n                        <IconButton\n                            title=\"Toggle line wrap\"\n                            size=\"small\"\n                            onClick={() => {\n                                // Raw code for toggling line wrap:\n                                //     editor.getSession().setUseWrapMode(!editor.getSession().getUseWrapMode());\n                                setFlagLineWrap(flagLineWrap === 'yes' ? 'no' : 'yes');\n                            }}\n                        >\n                            <WrapTextIcon\n                                style={{\n                                    fontSize: 16,\n                                    color: flagLineWrap === 'yes' ? '#1976d2' : undefined\n                                }}\n                            />\n                        </IconButton>\n\n                        {/* TODO: Full screen button */}\n\n                        {/* Save button */}\n                        <IconButton\n                            title=\"Save\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    const input = editor.getValue();\n                                    const blob = new Blob([input], { type: 'text/plain' });\n                                    const a = document.createElement('a');\n                                    a.href = URL.createObjectURL(blob);\n                                    let extension;\n                                    switch (mode) {\n                                        case mode_css:\n                                            extension = 'css';\n                                            break;\n                                        case mode_csv:\n                                            extension = 'csv';\n                                            break;\n                                        case mode_json:\n                                            extension = 'json';\n                                            break;\n                                        case mode_less:\n                                            extension = 'less';\n                                            break;\n                                        default:\n                                            extension = 'txt';\n                                    }\n                                    const localTime = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60 * 1000)).toISOString().substring(0, 19).replace('T', ' ');\n                                    const localTimeAsPartOfFilename = localTime.replace(' ', '_').replace(/:/g, '-');\n                                    a.download = `output-${localTimeAsPartOfFilename}.${extension}`;\n                                    a.click();\n                                }\n                            }}\n                        >\n                            <SaveIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n                    </div>\n                    <div style={{ display: 'flex' }}>\n                        <div>\n                            {(() => {\n                                const disabled = (() => {\n                                    if (\n                                        mode === mode_json ||\n                                        mode === mode_css ||\n                                        mode === mode_less\n                                    ) {\n                                        return false;\n                                    } else {\n                                        return true;\n                                    }\n                                })();\n                                let title;\n                                if (disabled) {\n                                    title = 'Syntax highlighting not available for this mode';\n                                } else {\n                                    if (flagSyntaxHighlighting === 'yes') {\n                                        title = 'Disable syntax highlighting';\n                                    } else {\n                                        title = 'Enable syntax highlighting';\n                                    }\n                                }\n\n                                return (\n                                    <IconButton\n                                        size=\"small\"\n                                        title={title}\n                                        onClick={() => {\n                                            if (disabled) {\n                                                // TODO: Show a tooltip message\n                                            } else {\n                                                setFlagSyntaxHighlighting(\n                                                    flagSyntaxHighlighting === 'yes' ? 'no' : 'yes'\n                                                );\n                                            }\n                                        }}\n                                    >\n                                        {(() => {\n                                            let Icon;\n                                            if (flagSyntaxHighlighting === 'yes') {\n                                                Icon = BorderColorIcon;\n                                            } else {\n                                                Icon = BorderColorOutlinedIcon;\n                                            }\n\n                                            let color;\n                                            if (disabled) {\n                                                color = '#ccc';\n                                            } else {\n                                                if (flagSyntaxHighlighting === 'yes') {\n                                                    color = '#1976d2';\n                                                } else {\n                                                    color = undefined;\n                                                }\n                                            }\n\n                                            return <Icon style={{ fontSize: 16, color }} />;\n                                        })()}\n                                    </IconButton>\n                                );\n                            })()}\n                        </div>\n                        <div>\n                            <div>\n                                {(() => {\n                                    return (\n                                        <IconButton\n                                            size=\"small\"\n                                            title=\"Insert sample value\"\n                                            onClick={() => {\n                                                const editor = editorRef.current;\n\n                                                let output = [];\n                                                switch (mode) {\n                                                    case mode_css:\n                                                        output = output = [\n                                                            'body {',\n                                                            '    background-color: #f0f0f0;',\n                                                            '}',\n                                                            '',\n                                                            'body h1 {',\n                                                            '    color: #000000;',\n                                                            '    font-size: 24px;',\n                                                            '    font-weight: bold;',\n                                                            '    text-align: center;',\n                                                            '}',\n                                                            ''\n                                                        ];\n                                                        break;\n                                                    case mode_csv:\n                                                        output = [\n                                                            'Name,Age,Height',\n                                                            'Charlie,22,1.85',\n                                                            'Bob,21,1.75',\n                                                            'Alice,20,1.65',\n                                                            'David,23,1.95'\n                                                        ];\n                                                        break;\n                                                    case mode_json:\n                                                        output = [\n                                                            '{',\n                                                            '    \"data\": [',\n                                                            '        { \"name\": \"Charlie\", \"age\": 22, \"height\": 1.85 },',\n                                                            '        { \"name\": \"Bob\",     \"age\": 21, \"height\": 1.75 },',\n                                                            '        { \"name\": \"Alice\",   \"age\": 20, \"height\": 1.65 },',\n                                                            '        { \"name\": \"David\",   \"age\": 23, \"height\": 1.95 }',\n                                                            '    ]',\n                                                            '}'\n                                                        ];\n                                                        break;\n                                                    case mode_less:\n                                                        output = [\n                                                            '@color: #222;',\n                                                            '',\n                                                            'body {',\n                                                            '    color: @color;',\n                                                            '',\n                                                            '    a {',\n                                                            '        color: @color;',\n                                                            '    }',\n                                                            '}'\n                                                        ];\n                                                        break;\n                                                    case mode_list:\n                                                        output = [\n                                                            'Charlie',\n                                                            'Bob',\n                                                            'Alice',\n                                                            'David'\n                                                        ];\n                                                        break;\n                                                    default:\n                                                        output = [\n                                                            'Please provide content here'\n                                                        ];\n                                                }\n\n                                                editor.setValue(output.join('\\n'));\n                                            }}\n                                        >\n                                            <ScienceIcon style={{ fontSize: 16 }} />\n                                        </IconButton>\n                                    );\n                                })()}\n                            </div>\n                        </div>\n                        <div style={{ marginLeft: 5 }}>\n                            <Select\n                                native\n                                value={mode}\n                                style={{\n                                    width: 75,\n                                    height: 24,\n                                    fontSize: 11\n                                }}\n                                onChange={(e) => {\n                                    const mode = e.target.value;\n                                    setMode(mode);\n                                    setStoredMode(mode);\n\n                                    const searchParamsToApply = generateTargetSearchParamsAsJson({\n                                        mode,\n                                        operation: selectedOperations[mode],\n                                        selectedOperations\n                                    });\n                                    setSearchParams(searchParamsToApply);\n                                }}\n                            >\n                                <option value={mode_css}>CSS</option>\n                                <option value={mode_csv}>CSV</option>\n                                <option value={mode_json}>JSON</option>\n                                <option value={mode_less}>Less</option>\n                                <option value={mode_list}>List</option>\n                            </Select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div>\n                    <AceEditor\n                        placeholder={placeholder}\n                        setOptions={{\n                            // useWorker: false,\n                            // enableBasicAutocompletion: true,\n                            // enableLiveAutocompletion: true,\n                            // enableSnippets: true,\n                            // showLineNumbers: true,\n                            // tabSize: 4,\n                            // useSoftTabs: true,\n\n                            wrap: flagLineWrap === 'yes' ? true : false\n                        }}\n                        mode={modeForSyntaxHighlighting}\n                        theme=\"github\"\n                        onLoad={(editor) => {\n                            editorRef.current = editor;\n                            if (typeof onLoad === 'function') {\n                                onLoad(editor);\n                            }\n                        }}\n                        onChange={async (val, delta) => {\n                            await debouncedOnChange(val, delta);\n                        }}\n                        editorProps={{ $blockScrolling: true }}\n                        width={editorWidth}\n                        height={editorHeight}\n                    />\n\n                </div>\n                {\n                    allowFileInput &&\n                    <div style={{ marginTop: 10 }}>\n                        <input type=\"file\" />\n                    </div>\n                }\n            </div>\n\n            {\n                !hideOperations &&\n                <div style={{ marginTop: 10 }}>\n                    <div\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'space-between'\n                        }}\n                    >\n                        <div>\n                            <Select\n                                native\n                                style={{\n                                    width: 220,\n                                    height: 28,\n                                    fontSize: 11\n                                }}\n                                value={selectedOperations[mode]}\n                                onChange={(e) => {\n                                    const selectedOperation = e.target.value;\n\n                                    const json = JSON.parse(JSON.stringify(selectedOperations));\n                                    json[mode] = selectedOperation;\n\n                                    setStoredOperations(json);\n\n                                    const searchParamsToApply = generateTargetSearchParamsAsJson({\n                                        mode,\n                                        operation: selectedOperation,\n                                        selectedOperations\n                                    });\n                                    setSearchParams(searchParamsToApply);\n                                }}\n                            >\n                                <option\n                                    value=\"\"\n                                    style={{ color: '#777' }}\n                                >\n                                    -- Operations --\n                                </option>\n\n                                {\n                                    mode === mode_css &&\n                                    <React.Fragment>\n                                        <optgroup label=\"Format\">\n                                            <option value={$css_formatCss}>\n                                                Format CSS\n                                            </option>\n                                            <option value={$css_minifyCss}>\n                                                Minify CSS\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Transform\">\n                                            <option value={$css_cssToScss}>\n                                                CSS to SCSS\n                                            </option>\n                                        </optgroup>\n                                    </React.Fragment>\n                                }\n                                {\n                                    mode === mode_less &&\n                                    <React.Fragment>\n                                        <optgroup label=\"Format\">\n                                            <option value={$less_formatLess}>\n                                                Format Less\n                                            </option>\n                                            <option value={$less_minifyLess}>\n                                                Minify Less\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Transform\">\n                                            <option value={$less_lessToCss}>\n                                                Less to CSS\n                                            </option>\n                                        </optgroup>\n                                    </React.Fragment>\n                                }\n                                {\n                                    mode === mode_list &&\n                                    <React.Fragment>\n                                        <optgroup label=\"Lines\">\n                                            <option value={$list_removeEmptyLines}>\n                                                Remove empty lines\n                                            </option>\n                                            <option value={$list_removeDuplicates}>\n                                                Remove duplicates\n                                            </option>\n                                        </optgroup>\n\n                                        <optgroup label=\"Sort\">\n                                            <option value={$list_sort}>\n                                                Sort\n                                            </option>\n                                            <option value={$list_caseInsensitiveSort}>\n                                                Case-insensitive sort\n                                            </option>\n                                            <option value={$list_naturalSort}>\n                                                Natural sort\n                                            </option>\n                                            <option value={$list_randomize}>\n                                                Randomize\n                                            </option>\n                                            <option value={$list_reverse}>\n                                                Reverse\n                                            </option>\n                                        </optgroup>\n\n                                        <optgroup label=\"String\">\n                                            <option value={$list_trimLines}>\n                                                Trim lines\n                                            </option>\n                                            <option value={$list_removeCommaCharacterAtLineEnds}>\n                                                Remove comma character at line ends\n                                            </option>\n                                            <option value={$list_removeQuoteAndApostropheCharacters}>\n                                                Remove &quot; and &apos; characters\n                                            </option>\n                                        </optgroup>\n\n                                        <optgroup label=\"Stats\">\n                                            <option value={$list_getStats}>\n                                                Get Stats\n                                            </option>\n                                        </optgroup>\n\n                                        <optgroup label=\"Transform\">\n                                            <option value={$list_linesToJsonArray}>\n                                                Lines to JSON Array\n                                            </option>\n                                        </optgroup>\n                                    </React.Fragment>\n                                }\n                                {\n                                    mode === mode_csv &&\n                                    <React.Fragment>\n                                        <optgroup label=\"Columns\">\n                                            <option value={$csv_removeFirstColumnFromCsv}>\n                                                Remove first column from CSV\n                                            </option>\n                                            <option value={$csv_removeLastColumnFromCsv}>\n                                                Remove last column from CSV\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Transform\">\n                                            <option value={$csv_csvToJson}>\n                                                CSV to JSON\n                                            </option>\n                                        </optgroup>\n                                    </React.Fragment>\n                                }\n                                {\n                                    mode === mode_json &&\n                                    <React.Fragment>\n                                        <optgroup label=\"Format\">\n                                            <option value={$json_formatJson}>\n                                                Format JSON\n                                            </option>\n                                            <option value={$json_minifyJson}>\n                                                Minify JSON\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Edit\">\n                                            <option value={$json_removeProperty}>\n                                                Remove property\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Sort\">\n                                            <option value={$json_sortJson}>\n                                                Sort JSON\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Fix\">\n                                            <option value={$json_fixDataTypes}>\n                                                Fix data types\n                                            </option>\n                                        </optgroup>\n                                        <optgroup label=\"Transform\">\n                                            <option value={$json_jsonToLines}>\n                                                JSON to Lines\n                                            </option>\n                                            <option value={$json_jsonToCsv}>\n                                                JSON to CSV\n                                            </option>\n                                        </optgroup>\n                                    </React.Fragment>\n                                }\n                            </Select>\n                        </div>\n                        <div style={{ marginLeft: 5 }}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                size=\"small\"\n                                startIcon={<CheckIcon />}\n                                disabled={operation === ''}\n                                onClick={async () => {\n                                    await applyTheOperation();\n                                }}\n                            >\n                                Apply\n                            </Button>\n                        </div>\n                    </div>\n                    {\n                        recentOperations.length > 0 &&\n                        <div style={{ marginTop: 10 }}>\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    backgroundColor: '#f5f5f5',\n                                    border: '1px solid #e0e0e0',\n                                    borderRadius: 999\n                                }}\n                            >\n                                <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', fontSize: 12 }}>\n                                    <IconButton\n                                        size=\"small\"\n                                        title=\"Reset suggested operations\"\n                                        onClick={() => {\n                                            setRecentOperations(defaultRecommendedOperations);\n                                            localStorage.setItem('recentOperations', JSON.stringify([]));\n                                        }}\n                                    >\n                                        <StarIcon style={{ fontSize: 16 }} />\n                                    </IconButton>\n                                </div>\n                                <div\n                                    style={{\n                                        borderRight: '1px solid #e0e0e0'\n                                    }}\n                                ></div>\n                                <div\n                                    style={{\n                                        backgroundColor: '#fff',\n                                        width: '100%',\n                                        borderTopRightRadius: 999,\n                                        borderBottomRightRadius: 999\n                                    }}\n                                >\n                                    <RecentOperations\n                                        editorRef={editorRef}\n                                        onValueUpdate={onValueUpdate}\n                                        mode={mode}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    }\n                </div>\n            }\n        </div>\n    );\n};\nMainEditor.propTypes = {\n    placeholder: PropTypes.string,\n    onLoad: PropTypes.func,\n    onValueUpdate: PropTypes.func,\n    allowFileInput: PropTypes.bool,\n    style: PropTypes.object,\n    editorWidth: PropTypes.string,\n    editorHeight: PropTypes.string\n};\n\nexport { MainEditor };\n","import React, { useRef } from 'react';\n\nimport { MainEditor } from '../MainEditor/MainEditor.js';\n\nconst SingleEditor = () => {\n    const editorRef = useRef(null);\n    return (\n        <div>\n            <MainEditor\n                placeholder=\"Provide text here\"\n                onLoad={(editor) => {\n                    editorRef.current = editor;\n                }}\n                style={{ marginTop: 5 }}\n                editorWidth=\"1120px\"\n                editorHeight=\"300px\"\n            />\n        </div>\n    );\n};\n\nexport { SingleEditor };\n","// extracted by mini-css-extract-plugin\nexport default {\"DoubleEditor\":\"DoubleEditor__DoubleEditor--molkI\"};","import React, { useRef } from 'react';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport SwapHorizontalCircleRoundedIcon from '@mui/icons-material/SwapHorizontalCircleRounded.js';\n\nimport Checkbox from '@mui/material/Checkbox/index.js';\nimport FormControlLabel from '@mui/material/FormControlLabel/index.js';\n\nimport { MainEditor } from '../MainEditor/MainEditor.js';\n\nimport styles from './DoubleEditor.css';\n\nconst DoubleEditor = () => {\n    const editorARef = useRef(null);\n    const editorBRef = useRef(null);\n\n    const [autoApply, setAutoApply] = React.useState(true);\n\n    return (\n        <div className={styles.TripleEditor}>\n            <div style={{ display: 'flex', justifyContent: 'center', minWidth: 1120 }}>\n                <div>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 14,\n                            letterSpacing: '0.05em',\n                            color: '#777'\n                        }}\n                    >\n                        <span style={{ fontSize: 18 }}>I</span>nput\n                    </div>\n                    <div>\n                        <MainEditor\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorARef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"500px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                            autoApply={autoApply}\n                            onComputeOutput={({ operation, output }) => {\n                                editorBRef.current.setValue(output);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center'\n                        }}\n                    >\n                        <div\n                            style={{\n                                marginLeft: 'auto',\n                                marginRight: 'auto'\n                            }}\n                        >\n                            <IconButton\n                                variant=\"filled\"\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={() => {\n                                    const valueA = editorARef.current.getValue();\n                                    const valueB = editorBRef.current.getValue();\n\n                                    // Swap values\n                                    editorARef.current.setValue(valueB);\n                                    editorBRef.current.setValue(valueA);\n                                }}\n                            >\n                                <SwapHorizontalCircleRoundedIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center'\n                            // height: '300px'\n                        }}\n                    >\n                        <FormControlLabel\n                            control={\n                                <Checkbox\n                                    checked={autoApply}\n                                    onChange={(event) => {\n                                        const flagAutoApply = event.target.checked;\n                                        setAutoApply(flagAutoApply);\n\n                                        if (flagAutoApply) {\n                                            // TODO: Apply the operation\n                                        }\n                                    }}\n                                />\n                            }\n                            label={\n                                <div>\n                                    <span style={{ fontSize: 12 }}>Auto-apply</span>\n                                </div>\n                            }\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 14,\n                            letterSpacing: '0.05em',\n                            color: '#777'\n                        }}\n                    >\n                        <span style={{ fontSize: 18 }}>O</span>utput\n                    </div>\n                    <div>\n                        <MainEditor\n                            placeholder=\"Result of the operation will be available here\"\n                            onLoad={(editor) => {\n                                editorBRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"500px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                            hideOperations\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { DoubleEditor };\n","// extracted by mini-css-extract-plugin\nexport default {\"TripleEditor\":\"TripleEditor__TripleEditor--CeiGf\"};","import React, { useRef } from 'react';\n\nimport {\n    intersection,\n    union,\n    difference\n} from 'lodash';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport SwapHorizontalCircleRoundedIcon from '@mui/icons-material/SwapHorizontalCircleRounded.js';\n\nimport Button from '@mui/material/Button/index.js';\n\nimport { MainEditor } from '../MainEditor/MainEditor.js';\n\nimport styles from './TripleEditor.css';\n\nconst performABToC = ({\n    editorARef,\n    editorBRef,\n    editorCRef,\n    operation\n}) => {\n    const valueA = editorARef.current.getValue();\n    const valueB = editorBRef.current.getValue();\n\n    const a = valueA.split('\\n');\n    const b = valueB.split('\\n');\n\n    let c = '';\n\n    if (operation === 'append') {\n        c = [...a, ...b];\n    } else if (operation === 'union') {\n        c = union(a, b);\n    } else if (operation === 'intersection') {\n        c = intersection(a, b);\n    } else if (operation === 'difference') {\n        c = difference(a, b);\n    }\n\n    const valueC = c.join('\\n');\n\n    // Update C\n    editorCRef.current.setValue(valueC);\n};\n\nconst TripleEditor = function () {\n    const editorARef = useRef(null);\n    const editorBRef = useRef(null);\n    const editorCRef = useRef(null);\n\n    return (\n        <div className={styles.TripleEditor}>\n            <div style={{ display: 'flex', justifyContent: 'center', minWidth: 1120 }}>\n                <div>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        A\n                    </div>\n                    <div>\n                        <MainEditor\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorARef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <IconButton\n                            variant=\"filled\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => {\n                                const valueA = editorARef.current.getValue();\n                                const valueB = editorBRef.current.getValue();\n\n                                // Swap values\n                                editorARef.current.setValue(valueB);\n                                editorBRef.current.setValue(valueA);\n                            }}\n                        >\n                            <SwapHorizontalCircleRoundedIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        B\n                    </div>\n                    <div>\n                        <MainEditor\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorBRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block' }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'union'\n                                });\n                            }}\n                        >\n                            A ∪ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'intersection'\n                                });\n                            }}\n                        >\n                            A ∩ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'append'\n                                });\n                            }}\n                        >\n                            A + B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'difference'\n                                });\n                            }}\n                        >\n                            A − B\n                        </Button>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        C\n                    </div>\n                    <div>\n                        <MainEditor\n                            placeholder=\"Result of the operation will be available here\"\n                            onLoad={(editor) => {\n                                editorCRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { TripleEditor };\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tabs from '@mui/material/Tabs/index.js';\nimport Tab from '@mui/material/Tab/index.js';\n\nimport { useLocalStorage } from 'react-use';\nimport { useSearchParams  } from 'react-router-dom';\n\nimport { getCurrentSearchParamsAsJson } from '../utils/getCurrentSearchParamsAsJson.js';\n\nimport { SingleEditor } from '../SingleEditor/SingleEditor.js';\nimport { DoubleEditor } from '../DoubleEditor/DoubleEditor.js';\nimport { TripleEditor } from '../TripleEditor/TripleEditor.js';\n\nconst TabPanel = function (props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            hidden={value !== index}\n            {...other}\n        >\n            <div>\n                {children}\n            </div>\n\n            {/*\n                // If we wish to unmount the tab content when it is not selected\n                {\n                    value === index &&\n                    (\n                        <div>\n                            {children}\n                        </div>\n                    )\n                }\n            */}\n        </div>\n    );\n};\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n};\n\nconst getSanitizedTransformersWithStatus = (transformers) => {\n    if (\n        transformers === '1' ||\n        transformers === '2' ||\n        transformers === '3'\n    ) {\n        return {\n            wasAlreadyClean: true,\n            transformers\n        };\n    } else {\n        return {\n            wasAlreadyClean: false,\n            transformers: '2'\n        };\n    }\n};\n\nconst ContentTabs = () => {\n    const [storedTransformers, setStoredTransformers] = useLocalStorage('transformers', '2', { raw: true });\n\n    const transformers = getSanitizedTransformersWithStatus(storedTransformers).transformers;\n    const transformersAsInt = parseInt(transformers, 10);\n    const [selectedTabIndex, setSelectedTabIndex] = useState(transformersAsInt - 1);\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    useEffect(\n        () => {\n            const transformersFromSearchParams = searchParams.get('transformers');\n            const sanitizedTransformersWithStatus = getSanitizedTransformersWithStatus(transformersFromSearchParams);\n\n            if (sanitizedTransformersWithStatus.wasAlreadyClean) {\n                setStoredTransformers(transformersFromSearchParams);\n                setSelectedTabIndex(\n                    parseInt(sanitizedTransformersWithStatus.transformers, 10) - 1\n                );\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [] // This useEffect() should run only once (at the time of mounting)\n    );\n\n    const handleChange = (event, newValue) => {\n        setSelectedTabIndex(newValue);\n\n        const transformers = '' + (newValue + 1);\n\n        setStoredTransformers(transformers);\n\n        const currentSearchParams = getCurrentSearchParamsAsJson();\n        const targetSearchParams = { ...currentSearchParams };\n        targetSearchParams.transformers = transformers;\n        setSearchParams(targetSearchParams);\n    };\n\n    return (\n        <div>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    minWidth: '1120'\n                }}\n            >\n                <Tabs value={selectedTabIndex} onChange={handleChange}>\n                    <Tab\n                        label={\n                            <div\n                                style={{\n                                    fontFamily: '\"Transformers\", sans-serif',\n                                    fontVariant: 'small-caps',\n                                    textTransform: 'none',\n                                    fontSize: 18\n                                }}\n                            >\n                                Transformers I\n                            </div>\n                        }\n                    />\n                    <Tab\n                        label={\n                            <div\n                                style={{\n                                    fontFamily: '\"Transformers\", sans-serif',\n                                    fontVariant: 'small-caps',\n                                    textTransform: 'none',\n                                    fontSize: 18\n                                }}\n                            >\n                                Transformers II\n                            </div>\n                        }\n                    />\n                    <Tab\n                        label={\n                            <div\n                                style={{\n                                    fontFamily: '\"Transformers\", sans-serif',\n                                    fontVariant: 'small-caps',\n                                    textTransform: 'none',\n                                    fontSize: 18\n                                }}\n                            >\n                                Transformers III\n                            </div>\n                        }\n                    />\n                </Tabs>\n            </div>\n            <div\n                style={{\n                    marginTop: 40,\n                    display: 'flex',\n                    justifyContent: 'center',\n                    minWidth: '1120'\n                }}\n            >\n                <TabPanel value={selectedTabIndex} index={0}>\n                    <div>\n                        <SingleEditor />\n                    </div>\n                </TabPanel>\n                <TabPanel value={selectedTabIndex} index={1}>\n                    <div>\n                        <DoubleEditor />\n                    </div>\n                </TabPanel>\n                <TabPanel value={selectedTabIndex} index={2}>\n                    <TripleEditor />\n                </TabPanel>\n            </div>\n        </div>\n    );\n};\n\nexport { ContentTabs };\n","import React from 'react';\n\nimport { ContentTabs } from './ContentTabs/ContentTabs.js';\n\nimport styles from './Dashboard.css';\n\nconst Dashboard = () => {\n    return (\n        <div className={styles.Dashboard}>\n            <div style={{ marginTop: 35 }}>\n                <ContentTabs />\n            </div>\n        </div>\n    );\n};\n\nexport { Dashboard };\n","// extracted by mini-css-extract-plugin\nexport default {\"Dashboard\":\"Dashboard__Dashboard--d2pNX\"};","import React from 'react';\n\nimport styles from './PageFooter.css';\n\nimport { CreatedByMessage } from 'generic-components/CreatedByMessage/CreatedByMessage.js';\n\nclass PageFooter extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageFooter}>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 45,\n                        marginBottom: 20\n                    }}\n                >\n                    <div>\n                        <div>\n                            <CreatedByMessage />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageFooter };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageFooter\":\"PageFooter__PageFooter--yI25Y\"};","import React from 'react';\n\nimport { SnackbarProvider } from 'notistack';\n\nimport {\n    createBrowserRouter,\n    RouterProvider\n} from 'react-router-dom';\n\nimport './styles-reset.css';\nimport './App.css';\n\nimport { PageHeader } from './PageHeader/PageHeader.js';\nimport { Dashboard } from './Dashboard/Dashboard.js';\nimport { PageFooter } from './PageFooter/PageFooter.js';\n\nconst router = createBrowserRouter([\n    {\n        // Currently, using it as SPA with query parameters, so all routes are the same. In local development, the path\n        // is `/`, but in GitHub Pages, the path is `/transformers/` (https://webextensions.github.io/transformers/),\n        // so, `window.location.pathname` matches that in the URL.\n        path: window.location.pathname,\n\n        element: (\n            <div>\n                <PageHeader />\n                <div>\n                    <Dashboard />\n                </div>\n                <PageFooter />\n            </div>\n        )\n    }\n]);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <SnackbarProvider\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                maxSnack={3}\n                dense\n                preventDuplicate\n                autoHideDuration={3000}\n            >\n                <RouterProvider router={router} />\n            </SnackbarProvider>\n        );\n    }\n}\n\nexport { App };\n","/* eslint-disable filenames/no-index */\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client'; // eslint-disable-line node/file-extension-in-import\n\nimport './index.css';\n\nimport { App } from './App/App.js';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"chunk.\" + \"lessNpmPackage\" + \".\" + \"e393786a894ce095e023\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktransformers\"] = self[\"webpackChunktransformers\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [360,375], () => (__webpack_require__(13373)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","window","less","onReady","PageHeader","React","render","className","style","display","flexDirection","alignItems","marginTop","margin","textAlign","fontVariant","letterSpacing","fontSize","color","getCurrentSearchParamsAsJson","params","URLSearchParams","location","search","ob","param","mode_css","mode_csv","mode_json","mode_less","mode_list","modes","$css_formatCss","$css_minifyCss","$css_cssToScss","$list_removeEmptyLines","$list_removeDuplicates","$list_sort","$list_caseInsensitiveSort","$list_naturalSort","$list_randomize","$list_reverse","$list_trimLines","$list_removeCommaCharacterAtLineEnds","$list_removeQuoteAndApostropheCharacters","$list_getStats","$list_linesToJsonArray","$csv_removeFirstColumnFromCsv","$csv_removeLastColumnFromCsv","$csv_csvToJson","$json_formatJson","$json_minifyJson","$json_removeProperty","$json_sortJson","$json_fixDataTypes","$json_jsonToLines","$json_jsonToCsv","$less_formatLess","$less_minifyLess","$less_lessToCss","defaultRecommendedOperations","defaultSelectedOperations","IconNotAvailable","CircleIcon","availableOperations","message","Icon","MoodIcon","CompressIcon","DataObjectIcon","FirstPageIcon","LastPageIcon","PlaylistRemoveIcon","CategoryIcon","BuildIcon","ReorderIcon","AppsIcon","SettingsEthernetIcon","CopyAllIcon","SortIcon","AbcIcon","ParkIcon","ShuffleOnIcon","KeyboardDoubleArrowDownIcon","CommitIcon","CleaningServicesIcon","FormatQuoteIcon","BarChartIcon","allOperationsById","mode","operationsForMode","operationId","id","allOperationIds","Object","keys","recentOperationsFromLocalStorage","localStorage","getItem","recentOperations","JSON","parse","Array","isArray","err","console","error","filter","operation","includes","recentOperationsAtom","atom","trimLine","line","trim","removeCommaCharacterAtEndFromLine","char","length","substring","removeMatchingCharacterAtEndFromLine","removeQuoteAndApostropheCharactersFromLine","replaceAll","removeLastColumnFromCsvLine","columns","split","pop","join","removeFirstColumnFromCsvLine","shift","traverseNode","root","transform","output","key","fixDataTypes","json","node","String","Number","map","item","performOperation","async","getInputValue","input","extraInfo","beautifyCss","minifyCss","cssToScss","alert","lazyLoadLess","css","e","Error","column","index","moveCursorTo","row","position","jsonInput","stringify","removePropertyRecursively","obj","propertyName","hasOwnProperty","forEach","prompt","jsonStableStringify","space","every","push","jsonToCsv","lines","removeFirstColumnFromCsvLines","removeLastColumnFromCsvLines","headers","i","j","csvToJson","x","removeEmptyLines","Set","removeDuplicates","sort","a","b","toLowerCase","localeCompare","undefined","numeric","Math","random","reverse","trimLines","removeCommaCharacterAtEndFromLines","removeQuoteAndApostropheCharactersFromLines","stats","linesCount","charactersCount","words","replace","wordsCount","uniqueWordsCount","size","RecentOperations","editorRef","onValueUpdate","setRecentOperations","useAtom","width","overflow","paddingLeft","IconButton","title","onClick","operationsByUser","uniqueOperationsByUser","indexOf","setItem","current","getValue","setValue","propTypes","PropTypes","copy","simpleText","navigator","clipboard","writeText","generateTargetSearchParamsAsJson","selectedOperations","targetSearchParams","getSanitizedModeWithStatus","wasAlreadyClean","MainEditor","placeholder","onLoad","allowFileInput","editorWidth","editorHeight","autoApply","onComputeOutput","hideOperations","enqueueSnackbar","useSnackbar","storedMode","setStoredMode","useLocalStorage","raw","setMode","useState","searchParams","setSearchParams","useSearchParams","useEffect","modeFromSearchParams","get","storedOperations","setStoredOperations","flagSyntaxHighlighting","setFlagSyntaxHighlighting","flagLineWrap","setFlagLineWrap","refreshUndoRedo","setRefreshUndoRedo","Date","now","modeForSyntaxHighlighting","useRef","debouncedEnqueueSnackbar","useDebouncedCallback","errMessage","debouncedOnChange","val","delta","applyTheOperation","moveCursorToPosition","focus","extraInfoString","justifyContent","editor","selectedText","getSelectedText","selectAll","execCommand","ContentCut","ContentCopy","text","Backspace","disabled","getSession","getUndoManager","hasUndo","Undo","hasRedo","Redo","WrapText","blob","Blob","type","document","createElement","extension","href","URL","createObjectURL","localTimeAsPartOfFilename","getTimezoneOffset","toISOString","download","click","Save","BorderColorIcon","BorderColorOutlinedIcon","Science","marginLeft","Select","native","value","height","onChange","target","searchParamsToApply","setOptions","wrap","theme","editorProps","$blockScrolling","selectedOperation","label","Button","variant","startIcon","Check","backgroundColor","border","borderRadius","Star","borderRight","borderTopRightRadius","borderBottomRightRadius","SingleEditor","DoubleEditor","editorARef","editorBRef","setAutoApply","styles","minWidth","fontFamily","marginRight","valueA","valueB","SwapHorizontalCircleRounded","FormControlLabel","control","Checkbox","checked","event","flagAutoApply","performABToC","editorCRef","c","union","intersection","difference","valueC","TripleEditor","TabPanel","props","children","other","hidden","getSanitizedTransformersWithStatus","transformers","ContentTabs","storedTransformers","setStoredTransformers","transformersAsInt","parseInt","selectedTabIndex","setSelectedTabIndex","transformersFromSearchParams","sanitizedTransformersWithStatus","Tabs","newValue","Tab","textTransform","Dashboard","PageFooter","marginBottom","CreatedByMessage","router","createBrowserRouter","path","pathname","element","App","anchorOrigin","vertical","horizontal","maxSnack","dense","preventDuplicate","autoHideDuration","container","getElementById","createRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdD","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","splice","r","n","getter","__esModule","d","getPrototypeOf","t","this","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","appendChild","Symbol","toStringTag","nmd","paths","scriptUrl","importScripts","currentScript","p","installedChunks","installedChunkData","promise","resolve","reject","errorType","realSrc","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}