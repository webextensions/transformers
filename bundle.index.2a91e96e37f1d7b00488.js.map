{"version":3,"file":"bundle.index.2a91e96e37f1d7b00488.js","mappings":"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","sources":["webpack://transformers/webpack/runtime/chunk loaded","webpack://transformers/webpack/runtime/create fake namespace object","webpack://transformers/webpack/runtime/load script","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/before-loading-less.js","webpack://transformers/./src/App/PageHeader/PageHeader.js","webpack://transformers/./src/App/PageHeader/PageHeader.css?080f","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/constOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/JotaiState.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/textUtils.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/performOperation.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/RecentOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.css?4456","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.js","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.css?a3ee","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.js","webpack://transformers/./src/App/Dashboard/Dashboard.js","webpack://transformers/./src/App/Dashboard/Dashboard.css?d7b8","webpack://transformers/./src/App/PageFooter/PageFooter.js","webpack://transformers/./src/App/PageFooter/PageFooter.css?9170","webpack://transformers/./src/App/App.js","webpack://transformers/./src/index.js","webpack://transformers/webpack/bootstrap","webpack://transformers/webpack/runtime/amd define","webpack://transformers/webpack/runtime/compat get default export","webpack://transformers/webpack/runtime/define property getters","webpack://transformers/webpack/runtime/ensure chunk","webpack://transformers/webpack/runtime/get javascript chunk filename","webpack://transformers/webpack/runtime/get mini-css chunk filename","webpack://transformers/webpack/runtime/global","webpack://transformers/webpack/runtime/hasOwnProperty shorthand","webpack://transformers/webpack/runtime/make namespace object","webpack://transformers/webpack/runtime/node module decorator","webpack://transformers/webpack/runtime/publicPath","webpack://transformers/webpack/runtime/jsonp chunk loading","webpack://transformers/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"transformers:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t};\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","window.less = {\n    // To disable any attempt to transpile LESS to CSS from style tags with rel=\"stylesheet/less\" since that would\n    // lead to an unwanted console message saying: \"Less has finished and no sheets were loaded.\"\n    onReady: false\n};\n","import React from 'react';\n\nimport styles from './PageHeader.css';\n\nclass PageHeader extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageHeader}>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                        marginTop: 25\n                    }}\n                >\n                    <h1 style={{ margin: 0, textAlign: 'center' }}>\n                        {'Transformers: '}\n                        <span style={{ fontVariant: 'small-caps' }}>\n                            <span style={{ letterSpacing: '0.05em' }}>\n                                Operations&nbsp;on&nbsp;the&nbsp;Text\n                            </span>\n                        </span>\n                    </h1>\n                    <h3 style={{ fontSize: 11, margin: '10px 0 0 0', color: '#555', textAlign: 'center' }}>\n                        Operations for Lists, Sets, CSV, JSON, etc\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageHeader };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageHeader\":\"PageHeader__PageHeader--AAWQ1\"};","// import React from 'react';\n\nimport CircleIcon from '@mui/icons-material/Circle.js';\n\nimport AppRegistrationIcon from '@mui/icons-material/AppRegistration.js';\n\nimport CompressIcon from '@mui/icons-material/Compress.js';\n\nimport DataObjectIcon from '@mui/icons-material/DataObject.js';\n\nimport SettingsEthernetIcon from '@mui/icons-material/SettingsEthernet.js';\nimport CopyAllIcon from '@mui/icons-material/CopyAll.js';\n// import RestaurantIcon from '@mui/icons-material/Restaurant.js';\n\nimport SortIcon from '@mui/icons-material/Sort.js';\nimport AbcIcon from '@mui/icons-material/Abc.js';\nimport ParkIcon from '@mui/icons-material/Park.js';\nimport ShuffleOnIcon from '@mui/icons-material/ShuffleOn.js';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown.js';\n\nimport CommitIcon from '@mui/icons-material/Commit.js';\nimport CleaningServicesIcon from '@mui/icons-material/CleaningServices.js';\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote.js';\n\nimport ReorderIcon from '@mui/icons-material/Reorder.js';\nimport AppsIcon from '@mui/icons-material/Apps.js';\nimport MoodIcon from '@mui/icons-material/Mood.js';\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove.js';\nimport CategoryIcon from '@mui/icons-material/Category.js';\n\nimport BuildIcon from '@mui/icons-material/Build.js';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage.js';\nimport LastPageIcon from '@mui/icons-material/LastPage.js';\n\n// import VerticalAlignTopIcon from '@mui/icons-material/VerticalAlignTop.js';\n// import VerticalAlignBottomIcon from '@mui/icons-material/VerticalAlignBottom.js';\n\nimport BarChartIcon from '@mui/icons-material/BarChart.js';\n// import FormatListNumberedRtlIcon from '@mui/icons-material/FormatListNumberedRtl.js';\n// import SubtitlesIcon from '@mui/icons-material/Subtitles.js';\n// import SubtitlesOutlinedIcon from '@mui/icons-material/SubtitlesOutlined.js';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    mode_css = 'css',\n    mode_csv = 'csv',\n    mode_json = 'json',\n    mode_less = 'less',\n    mode_list = 'list';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    modes = [\n        mode_css,\n        mode_csv,\n        mode_json,\n        mode_less,\n        mode_list\n    ];\n\n// eslint-disable-next-line import/exports-last\nexport const\n    $css_sample_css                          = '$css_sample_css',\n\n    $css_formatCss                           = '$css_formatCss',\n    $css_minifyCss                           = '$css_minifyCss',\n\n    $css_cssToScss                           = '$css_cssToScss',\n\n    $list_sample_list                        = '$list_sample_list',\n\n    $list_removeEmptyLines                   = '$list_removeEmptyLines',\n    $list_removeDuplicates                   = '$list_removeDuplicates',\n    // $list_removeBeyondNLines              = '$list_removeBeyondNLines',\n\n    $list_sort                               = '$list_sort',\n    $list_caseInsensitiveSort                = '$list_caseInsensitiveSort',\n    $list_naturalSort                        = '$list_naturalSort',\n    $list_randomize                          = '$list_randomize',\n    $list_reverse                            = '$list_reverse',\n\n    $list_trimLines                          = '$list_trimLines',\n    $list_removeCommaCharacterAtLineEnds     = '$list_removeCommaCharacterAtLineEnds',\n    $list_removeQuoteAndApostropheCharacters = '$list_removeQuoteAndApostropheCharacters',\n\n    $list_getStats                           = '$list_getStats',\n    // $list_countLines                      = '$list_countLines',\n    // $list_countCharacters                 = '$list_countCharacters',\n    // $list_countWords                      = '$list_countWords',\n    // $list_countUniqueWords                = '$list_countUniqueWords',\n\n    $list_linesToJsonArray                   = '$list_linesToJsonArray',\n\n    $csv_sample_csv                          = '$csv_sample_csv',\n\n    $csv_removeFirstColumnFromCsv            = '$csv_removeFirstColumnFromCsv',\n    $csv_removeLastColumnFromCsv             = '$csv_removeLastColumnFromCsv',\n\n    $csv_csvToJson                           = '$csv_csvToJson',\n\n    $json_sample_json                        = '$json_sample_json',\n\n    $json_formatJson                         = '$json_formatJson',\n    $json_minifyJson                         = '$json_minifyJson',\n\n    $json_removeProperty                     = '$json_removeProperty',\n\n    $json_sortJson                           = '$json_sortJson',\n\n    $json_fixDataTypes                       = '$json_fixDataTypes',\n\n    // $json_removeFirstProperty             = '$json_removeFirstProperty',\n    // $json_removeLastProperty              = '$json_removeLastProperty',\n\n    $json_jsonToLines                        = '$json_jsonToLines',\n    $json_jsonToCsv                          = '$json_jsonToCsv',\n\n    $less_sample_less                        = '$less_sample_less',\n\n    $less_formatLess                         = '$less_formatLess',\n    $less_minifyLess                         = '$less_minifyLess',\n\n    $less_lessToCss                          = '$less_lessToCss';\n\n\n// eslint-disable-next-line import/exports-last\nexport const defaultRecommendedOperations = [\n    $css_sample_css,\n    $csv_sample_csv,\n    $json_sample_json,\n    $list_sample_list\n];\n\n// eslint-disable-next-line import/exports-last\nexport const IconNotAvailable = CircleIcon;\n\nconst\n    availableOperations = {\n        [mode_css]: {\n            [$css_sample_css]                          : { message: 'Sample CSS',                             Icon: AppRegistrationIcon },\n\n            [$css_formatCss]                           : { message: 'Format CSS',                             Icon: MoodIcon },\n            [$css_minifyCss]                           : { message: 'Minify CSS',                             Icon: CompressIcon },\n\n            [$css_cssToScss]                           : { message: 'CSS to SCSS',                            Icon: DataObjectIcon }\n        },\n        [mode_csv]: {\n            [$csv_sample_csv]                          : { message: 'Sample CSV',                             Icon: AppRegistrationIcon },\n\n            [$csv_removeFirstColumnFromCsv]            : { message: 'Remove first column from CSV',           Icon: FirstPageIcon },\n            [$csv_removeLastColumnFromCsv]             : { message: 'Remove last column from CSV',            Icon: LastPageIcon },\n\n            [$csv_csvToJson]                           : { message: 'CSV to JSON',                            Icon: DataObjectIcon }\n        },\n        [mode_json]: {\n            [$json_sample_json]                        : { message: 'Sample JSON',                            Icon: AppRegistrationIcon },\n\n            [$json_formatJson]                         : { message: 'Format JSON',                            Icon: MoodIcon },\n            [$json_minifyJson]                         : { message: 'Minify JSON',                            Icon: CompressIcon },\n\n            [$json_removeProperty]                     : { message: 'Remove property',                        Icon: PlaylistRemoveIcon },\n\n            [$json_sortJson]                           : { message: 'Sort JSON',                              Icon: CategoryIcon },\n\n            [$json_fixDataTypes]                       : { message: 'Fix data types',                         Icon: BuildIcon },\n\n            // [$json_removeFirstProperty]             : { message: 'Remove first property',                  Icon: VerticalAlignTopIcon },\n            // [$json_removeLastProperty]              : { message: 'Remove last property',                   Icon: VerticalAlignBottomIcon },\n\n            [$json_jsonToLines]                        : { message: 'JSON to lines',                          Icon: ReorderIcon },\n            [$json_jsonToCsv]                          : { message: 'JSON to CSV',                            Icon: AppsIcon }\n        },\n        [mode_less]: {\n            [$less_sample_less]                        : { message: 'Sample LESS',                            Icon: AppRegistrationIcon },\n\n            [$less_formatLess]                         : { message: 'Format LESS',                            Icon: MoodIcon },\n            [$less_minifyLess]                         : { message: 'Minify LESS',                            Icon: CompressIcon },\n\n            [$less_lessToCss]                          : { message: 'LESS to CSS',                            Icon: DataObjectIcon }\n        },\n        [mode_list]: {\n            [$list_sample_list]                        : { message: 'Sample list',                            Icon: AppRegistrationIcon },\n\n            [$list_removeEmptyLines]                   : { message: 'Remove empty lines',                     Icon: SettingsEthernetIcon },\n            [$list_removeDuplicates]                   : { message: 'Remove duplicates',                      Icon: CopyAllIcon },\n            // [$list_removeBeyondNLines]              : { message: 'Remove beyond N lines',                  Icon: RestaurantIcon },\n\n            [$list_sort]                               : { message: 'Sort',                                   Icon: SortIcon },\n            [$list_caseInsensitiveSort]                : { message: 'Case-insensitive sort',                  Icon: AbcIcon },\n            [$list_naturalSort]                        : { message: 'Natural sort',                           Icon: ParkIcon },\n            [$list_randomize]                          : { message: 'Randomize',                              Icon: ShuffleOnIcon },\n            [$list_reverse]                            : { message: 'Reverse',                                Icon: KeyboardDoubleArrowDownIcon },\n\n            [$list_trimLines]                          : { message: 'Trim lines',                             Icon: CommitIcon },\n            [$list_removeCommaCharacterAtLineEnds]     : { message: 'Remove comma character at line ends',    Icon: CleaningServicesIcon },\n            [$list_removeQuoteAndApostropheCharacters] : { message: 'Remove quote and apostrophe characters', Icon: FormatQuoteIcon },\n\n            [$list_getStats]                           : { message: 'Get stats',                              Icon: BarChartIcon },\n            // [$list_countLines]                      : { message: 'Count lines',                            Icon: FormatListNumberedRtlIcon },\n            // [$list_countCharacters]                 : { message: 'Count characters',                       Icon: AbcIcon },\n            // [$list_countWords]                      : { message: 'Count words',                            Icon: SubtitlesIcon },\n            // [$list_countUniqueWords]                : { message: 'Count unique words',                     Icon: SubtitlesOutlinedIcon },\n\n            [$list_linesToJsonArray]                   : { message: 'Lines to JSON Array',                    Icon: DataObjectIcon }\n        }\n    };\n\nconst allOperationsById = {};\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        allOperationsById[operationId] = operationsForMode[operationId];\n    }\n}\n\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        operationsForMode[operationId].id = operationId;\n    }\n}\n\nconst allOperationIds = Object.keys(allOperationsById);\n\nexport {\n    availableOperations,\n    allOperationsById,\n    allOperationIds\n};\n","import { atom } from 'jotai';\n\nimport {\n    allOperationIds,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nconst recentOperationsFromLocalStorage = localStorage.getItem('recentOperations');\n\nlet recentOperations = [];\ntry {\n    recentOperations = JSON.parse(recentOperationsFromLocalStorage);\n    if (!Array.isArray(recentOperations)) {\n        recentOperations = defaultRecommendedOperations;\n    }\n} catch (err) {\n    console.error(err);\n}\n\n// Remove operations that are not available anymore with that name\nrecentOperations.filter(operation => {\n    return allOperationIds.includes(operation);\n});\n\nconst recentOperationsAtom = atom(recentOperations);\n\nexport { recentOperationsAtom };\n","import jsonStableStringify from 'json-stable-stringify';\n\nconst removeEmptyLines = function (lines) {\n    const output = lines.filter((x) => {\n        return x;\n    });\n    return output;\n};\n\nconst removeDuplicates = function (lines) {\n    const output = [...new Set(lines)];\n    return output;\n};\n\nconst trimLine = (line) => {\n    return line.trim();\n};\nconst trimLines = function (lines) {\n    const output = lines.map(trimLine);\n    return output;\n};\n\nconst removeMatchingCharacterAtEndFromLine = function (line, char) {\n    if (line[line.length - 1] === char) {\n        return line.substring(0, line.length - 1);\n    }\n    return line;\n};\n\nconst removeCommaCharacterAtEndFromLine = function (line) {\n    return removeMatchingCharacterAtEndFromLine(line, ',');\n};\n\nconst removeCommaCharacterAtEndFromLines = function (lines) {\n    const output = lines.map(removeCommaCharacterAtEndFromLine);\n    return output;\n};\n\nconst removeQuoteAndApostropheCharactersFromLine = function (line) {\n    return (\n        line\n            .replaceAll('\"', '')\n            .replaceAll(\"'\", '')\n    );\n};\nconst removeQuoteAndApostropheCharactersFromLines = function (lines) {\n    const output = lines.map(removeQuoteAndApostropheCharactersFromLine);\n    return output;\n};\n\nconst removeLastColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.pop();\n    return columns.join(',');\n};\nconst removeLastColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeLastColumnFromCsvLine);\n    return output;\n};\n\nconst removeFirstColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.shift();\n    const output = columns.join(',');\n    return output;\n};\nconst removeFirstColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeFirstColumnFromCsvLine);\n    return output;\n};\n\nconst csvToJson = function (lines) {\n    const output = ['['];\n    const headers = lines[0].split(',');\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const columns = line.split(',');\n        const obj = {};\n\n        // eslint-disable-next-line unicorn/no-for-loop\n        for (let j = 0; j < columns.length; j++) {\n            const column = columns[j];\n            const header = headers[j];\n            obj[header] = column;\n        }\n        if (i < lines.length - 1) {\n            output.push('\\t' + JSON.stringify(obj) + ',');\n        } else {\n            output.push('\\t' + JSON.stringify(obj));\n        }\n    }\n    output.push(']');\n    return output;\n};\n\nconst traverseNode = function (root, transform) {\n    const output = transform(root);\n\n    if (typeof output === 'object') {\n        for (const key in output) {\n            output[key] = traverseNode(output[key], transform);\n        }\n    }\n\n    return output;\n};\n\nconst fixDataTypes = function (json) {\n    const output = traverseNode(json, function (node) {\n        if (typeof node === 'string') {\n            if (node === 'true') {\n                node = true;\n            } else if (node === 'false') {\n                node = false;\n            } else if (node === 'null') {\n                node = null;\n            } else if (String(Number(node)) === node) {\n                if (\n                    String(Number(node)) === 'Infinity' ||\n                    String(Number(node)) === '-Infinity' ||\n                    String(Number(node)) === 'NaN'\n                ) {\n                    // Do nothing\n                } else {\n                    node = Number(node);\n                }\n            }\n        } else if (Array.isArray(node)) {\n            node = node.map(item => {\n                return fixDataTypes(item);\n            });\n        } else if (typeof node === 'object') {\n            for (const key in node) {\n                node[key] = fixDataTypes(node[key]);\n            }\n        }\n\n        return node;\n    });\n\n    return output;\n};\n\nconst jsonToCsv = function (json) {\n    const line = [];\n    const output = [];\n\n    const keys = Object.keys(json[0]);\n    for (const key of keys) {\n        line.push(key);\n    }\n    output.push(line.join(','));\n\n    for (const ob of json) {\n        const line = [];\n        for (const key of keys) {\n            line.push(ob[key]);\n        }\n        output.push(line.join(','));\n    }\n\n    return output.join('\\n');\n};\n\nexport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n};\n","import {\n    beautifyCss,\n    cssToScss,\n    minifyCss\n} from 'helpmate-css/dist/index.js';\n\nimport './before-loading-less.js';\n\nimport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n} from './textUtils.js';\n\nimport {\n    $css_sample_css,\n\n    $css_cssToScss,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    $less_sample_less,\n\n    $less_formatLess,\n    $less_minifyLess,\n\n    $less_lessToCss\n} from './constOperations.js';\n\nconst lazyLoadLess = async () => {\n    const less = await import('less');\n    return less;\n};\n\nconst performOperation = async function ({ getInputValue, operation }) {\n    try {\n        if (\n            [\n                $css_formatCss,\n                $css_minifyCss,\n                $css_cssToScss,\n                $less_formatLess,\n                $less_minifyLess,\n                $less_lessToCss\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            let output;\n            let err = null;\n            const extraInfo = {};\n\n            switch (operation) {\n                case $css_formatCss:\n                    output = beautifyCss(input);\n                    break;\n                case $css_minifyCss:\n                    output = minifyCss(input);\n                    break;\n                case $css_cssToScss:\n                    if (input.trim() === '') {\n                        output = input;\n                    } else {\n                        output = cssToScss(input);\n\n                        // TODO: Identify and add note about in which case this might happen\n                        if (output === 'Error: no source supplied to csspretty.') {\n                            // eslint-disable-next-line no-alert\n                            alert('Sorry! The CSS to SCSS conversion failed.\\n\\nPlease try again with some simpler syntax.');\n                        }\n                    }\n                    break;\n                case $less_formatLess:\n                    output = beautifyCss(input);\n                    break;\n                case $less_minifyLess:\n                    output = minifyCss(input);\n                    break;\n\n                case $less_lessToCss:\n                    if (input.trim() === '') {\n                        output = input;\n                    } else {\n                        try {\n                            const less = await lazyLoadLess();\n\n                            const renderedOutput = await less.render(input);\n                            output = renderedOutput.css;\n\n                            // By default, \"less.render()\" provides the output with indentation of 2 space characters\n                            output = beautifyCss(output);\n                        } catch (e) {\n                            err = new Error(e.message + `\\n(Line ${e.line}, Column ${e.column}) / (Character ${e.index})`);\n                            output = null;\n\n                            const moveCursorTo = {\n                                row: e.line - 1,\n                                column: e.column,\n\n                                position: e.index\n                            };\n                            extraInfo.moveCursorTo = moveCursorTo;\n                        }\n                    }\n                    break;\n            }\n\n            return [err, output, extraInfo];\n        } else if (\n            [\n                $json_formatJson,\n                $json_minifyJson,\n                $json_removeProperty,\n                $json_sortJson,\n                $json_fixDataTypes,\n                $json_jsonToLines,\n                $json_jsonToCsv\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const jsonInput = JSON.parse(input);\n            let output;\n\n            switch (operation) {\n                case $json_formatJson:\n                    output = JSON.stringify(jsonInput, null, '\\t');\n                    break;\n                case $json_minifyJson:\n                    output = JSON.stringify(jsonInput);\n                    break;\n                case $json_removeProperty:\n                    // Just a block\n                    {\n                        // Remove a property from a JSON object recursively\n                        // TODO: Optimize this function\n                        // TODO: Verify that this function works as expected for all cases\n                        const removePropertyRecursively = (obj, propertyName) => {\n                            // eslint-disable-next-line no-prototype-builtins\n                            if (obj.hasOwnProperty(propertyName)) {\n                                delete obj[propertyName];\n                            } else {\n                                Object.keys(obj).forEach(key => {\n                                    if (typeof obj[key] === 'object') {\n                                        removePropertyRecursively(obj[key], propertyName);\n                                    } else if (Array.isArray(obj[key])) {\n                                        obj[key].forEach(item => {\n                                            if (typeof item === 'object') {\n                                                removePropertyRecursively(item, propertyName);\n                                            } else {\n                                                // Do nothing\n                                            }\n                                        });\n                                    } else {\n                                        // Do nothing\n                                    }\n                                });\n                            }\n                        };\n\n                        // eslint-disable-next-line no-alert\n                        const propertyName = prompt('Please enter the name of the property to remove:');\n                        if (propertyName) {\n                            removePropertyRecursively(jsonInput, propertyName);\n                            output = JSON.stringify(jsonInput, null, '\\t');\n                        } else {\n                            return [new Error('Please provide a property name.')];\n                        }\n                    }\n                    break;\n                case $json_sortJson:\n                    output = jsonStableStringify(jsonInput, { space: '\\t' });\n                    break;\n                case $json_fixDataTypes:\n                    output = fixDataTypes(jsonInput);\n                    output = JSON.stringify(output, null, '\\t');\n                    break;\n                case $json_jsonToLines:\n                    if (\n                        Array.isArray(jsonInput) &&\n                        jsonInput.every(item => typeof item === 'string')\n                    ) {\n                        output = jsonInput.join('\\n');\n                    } else {\n                        return [new Error('Please provide an Array of Strings as the input.')];\n                    }\n                    break;\n                case $json_jsonToCsv:\n                    output = jsonToCsv(jsonInput);\n                    break;\n            }\n\n            return [null, output];\n        } else if (\n            [\n                $list_getStats\n            ].includes(operation)\n        ) {\n            switch (operation) {\n                case $list_getStats:\n                {\n                    const stats = {};\n\n                    const input = getInputValue();\n                    const lines = input.split('\\n');\n                    stats.linesCount = lines.length;\n                    stats.charactersCount = input.length;\n\n                    // Replace all punctuation characters with a single space\n                    const inputWithoutPunctuation = input.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, ' '); // eslint-disable-line no-useless-escape\n\n                    // Replace all continuous whitespace characters with a single space\n                    const inputWithoutWhitespace = inputWithoutPunctuation.replace(/\\s+/g, ' ');\n\n                    const words = inputWithoutWhitespace.split(' ');\n                    stats.wordsCount = words.length; // Not a perfect way to count words, but it's good enough for now.\n\n                    stats.uniqueWordsCount = (new Set(words)).size;\n\n                    return [null, null, { stats }];\n                }\n            }\n        } else if (\n            [\n                $css_sample_css,\n\n                $csv_sample_csv,\n\n                $csv_removeFirstColumnFromCsv,\n                $csv_removeLastColumnFromCsv,\n\n                $csv_csvToJson,\n\n                $json_sample_json,\n\n                $less_sample_less,\n\n                $list_sample_list,\n\n                $list_removeEmptyLines,\n                $list_removeDuplicates,\n\n                $list_sort,\n                $list_caseInsensitiveSort,\n                $list_naturalSort,\n                $list_randomize,\n                $list_reverse,\n\n                $list_trimLines,\n                $list_removeCommaCharacterAtLineEnds,\n                $list_removeQuoteAndApostropheCharacters,\n\n                $list_linesToJsonArray\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const lines = input.split('\\n');\n\n            let output = lines;\n\n            switch (operation) {\n                case $css_sample_css:\n                    output = [\n                        'body {',\n                        '    background-color: #f0f0f0;',\n                        '}',\n                        '',\n                        'body h1 {',\n                        '    color: #000000;',\n                        '    font-size: 24px;',\n                        '    font-weight: bold;',\n                        '    text-align: center;',\n                        '}',\n                        ''\n                    ];\n                    break;\n\n                case $csv_sample_csv:\n                    output = [\n                        'Name,Age,Height',\n                        'Charlie,22,1.85',\n                        'Bob,21,1.75',\n                        'Alice,20,1.65',\n                        'David,23,1.95'\n                    ];\n                    break;\n                case $csv_removeFirstColumnFromCsv:\n                    output = removeFirstColumnFromCsvLines(lines);\n                    break;\n                case $csv_removeLastColumnFromCsv:\n                    output = removeLastColumnFromCsvLines(lines);\n                    break;\n\n                case $csv_csvToJson:\n                    output = csvToJson(lines);\n                    break;\n\n                case $json_sample_json:\n                    output = [\n                        '{',\n                        '    \"data\": [',\n                        '        { \"name\": \"Charlie\", \"age\": 22, \"height\": 1.85 },',\n                        '        { \"name\": \"Bob\",     \"age\": 21, \"height\": 1.75 },',\n                        '        { \"name\": \"Alice\",   \"age\": 20, \"height\": 1.65 },',\n                        '        { \"name\": \"David\",   \"age\": 23, \"height\": 1.95 }',\n                        '    ]',\n                        '}'\n                    ];\n                    break;\n\n                case $less_sample_less:\n                    output = [\n                        '@color: #222;',\n                        '',\n                        'body {',\n                        '    color: @color;',\n                        '',\n                        '    a {',\n                        '        color: @color;',\n                        '    }',\n                        '}'\n                    ];\n                    break;\n\n                case $list_sample_list:\n                    output = [\n                        'Charlie',\n                        'Bob',\n                        'Alice',\n                        'David'\n                    ];\n                    break;\n\n                case $list_removeEmptyLines:\n                    output = removeEmptyLines(lines);\n                    break;\n                case $list_removeDuplicates:\n                    output = removeDuplicates(lines);\n                    break;\n\n                case $list_sort:\n                    lines.sort(); // TODO: We may want to use \".toSorted()\" when it becomes available in modern browsers (though performance-wise it may actually be disadvantageous).\n                    output = lines;\n                    break;\n                case $list_caseInsensitiveSort:\n                    lines.sort((a, b) => {\n                        return a.toLowerCase().localeCompare(b.toLowerCase());\n                    });\n                    output = lines;\n                    break;\n                case $list_naturalSort:\n                    lines.sort((a, b) => {\n                        return a.localeCompare(b, undefined, { numeric: true });\n                    });\n                    output = lines;\n                    break;\n                case $list_randomize:\n                    lines.sort(() => Math.random() - 0.5);\n                    output = lines;\n                    break;\n                case $list_reverse:\n                    lines.reverse();\n                    output = lines;\n                    break;\n\n                case $list_trimLines:\n                    output = trimLines(lines);\n                    break;\n                case $list_removeCommaCharacterAtLineEnds:\n                    output = removeCommaCharacterAtEndFromLines(lines);\n                    break;\n                case $list_removeQuoteAndApostropheCharacters:\n                    output = removeQuoteAndApostropheCharactersFromLines(lines);\n                    break;\n\n                case $list_linesToJsonArray:\n                    output = JSON.stringify(lines, null, '\\t');\n                    output = output.split('\\n');\n                    break;\n            }\n\n            const finalOutput = output.join('\\n');\n            return [null, finalOutput];\n        } else {\n            return [new Error(`Error: Implementation is not available for operation: ${operation}`)];\n        }\n    } catch (err) {\n        return [err];\n    }\n};\n\nexport { performOperation };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useAtom } from 'jotai';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\n\nimport {\n    IconNotAvailable,\n\n    availableOperations,\n    allOperationsById\n} from './constOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nconst RecentOperations = function ({\n    editorRef,\n    onValueUpdate,\n    mode\n}) {\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                width: 291,\n                overflow: 'hidden',\n                paddingLeft: 10\n            }}\n        >\n            {\n                recentOperations\n                    .filter(operation => {\n                        const operationsForMode = availableOperations[mode];\n                        return operationsForMode[operation];\n                    })\n                    .map((operation, index) => {\n                        const operationsForMode = availableOperations[mode];\n                        return (\n                            <div key={index}>\n                                <IconButton\n                                    size=\"small\"\n                                    title={(\n                                        operationsForMode[operation]?.message ||\n                                        operation\n                                    )}\n                                    onClick={async () => {\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const operationsByUser = [\n                                            operation,\n                                            ...recentOperations\n                                        ];\n                                        // Remove duplicate operations (keep the first occurrence)\n                                        const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                            return operationsByUser.indexOf(operation) === index;\n                                        });\n                                        setRecentOperations(uniqueOperationsByUser);\n                                        localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const getInputValue = () => {\n                                            const value = editorRef.current.getValue();\n                                            return value;\n                                        };\n                                        const [err, output, extraInfo] = await performOperation({\n                                            getInputValue,\n                                            operation\n                                        });\n\n                                        if (err) {\n                                            console.error(err);\n                                            alert(err.message); // eslint-disable-line no-alert\n                                        } else {\n                                            if (output === null) {\n                                                alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                            } else {\n                                                editorRef.current.setValue(output);\n                                                if (typeof onValueUpdate === 'function') {\n                                                    onValueUpdate(output);\n                                                }\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {(() => {\n                                        let Icon = allOperationsById[operation]?.Icon;\n                                        if (!Icon) {\n                                            Icon = IconNotAvailable;\n                                        }\n                                        return <Icon style={{ fontSize: 16 }} />;\n                                    })()}\n                                </IconButton>\n                            </div>\n                        );\n                    })\n            }\n        </div>\n    );\n};\nRecentOperations.propTypes = {\n    editorRef: PropTypes.object.isRequired,\n    onValueUpdate: PropTypes.func,\n    mode: PropTypes.string.isRequired\n};\n\nexport { RecentOperations };\n","// extracted by mini-css-extract-plugin\nexport default {\"TextList\":\"TextList__TextList--NZ7zn\",\"translucentWithoutHover\":\"TextList__translucentWithoutHover--n0_xk\"};","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useSearchParams  } from 'react-router-dom';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver.js'; // https://github.com/securingsincity/react-ace/issues/725#issuecomment-543109155\nimport 'ace-builds/src-noconflict/mode-css.js';\nimport 'ace-builds/src-noconflict/mode-json.js';\nimport 'ace-builds/src-noconflict/theme-github.js';\n// import 'ace-builds/src-noconflict/ext-language_tools.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport Button from '@mui/material/Button/index.js';\n\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined.js';\nimport BorderColorIcon from '@mui/icons-material/BorderColor.js';\n\nimport ContentCutIcon from '@mui/icons-material/ContentCut.js';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy.js';\nimport BackspaceIcon from '@mui/icons-material/Backspace.js';\nimport UndoIcon from '@mui/icons-material/Undo.js';\nimport RedoIcon from '@mui/icons-material/Redo.js';\nimport WrapTextIcon from '@mui/icons-material/WrapText.js';\nimport SaveIcon from '@mui/icons-material/Save.js';\n\nimport Select from '@mui/material/Select/index.js';\n\nimport CheckIcon from '@mui/icons-material/Check.js';\n\nimport StarIcon from '@mui/icons-material/Star.js';\n\nimport { useAtom } from 'jotai';\n\nimport { useLocalStorage } from 'react-use';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport {\n    mode_css,\n    mode_csv,\n    mode_json,\n    mode_less,\n    mode_list,\n\n    modes,\n\n    $css_sample_css,\n\n    $css_formatCss,\n    $css_minifyCss,\n\n    $css_cssToScss,\n\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n    $json_minifyJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    $less_sample_less,\n\n    $less_formatLess,\n    $less_minifyLess,\n\n    $less_lessToCss,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nimport { RecentOperations } from './RecentOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nimport styles from './TextList.css';\n\nconst copy = async function (simpleText) {\n    try {\n        await navigator.clipboard.writeText(simpleText);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst TextList = function ({\n    placeholder,\n    onLoad,\n    onValueUpdate,\n    allowFileInput,\n    style,\n    editorWidth,\n    editorHeight\n}) {\n    const [storedMode, setStoredMode] = useLocalStorage('mode', mode_list, { raw: true });\n    const mode = (() => {\n        if (modes.indexOf(storedMode) === -1) {\n            return mode_list;\n        } else {\n            return storedMode;\n        }\n    })();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    useEffect(() => {\n        if (searchParams.get('mode')) {\n            setStoredMode(searchParams.get('mode'));\n        }\n    }, [searchParams]);\n\n    const [selectedOperations, setSelectedOperations] = useLocalStorage('selectedOperations', {\n        [mode_css]: '',\n        [mode_csv]: '',\n        [mode_json]: '',\n        [mode_less]: '',\n        [mode_list]: ''\n    });\n\n    const operation = selectedOperations[mode];\n\n    const [flagSyntaxHighlighting, setFlagSyntaxHighlighting] = useLocalStorage('flagSyntaxHighlighting', 'yes', { raw: true });\n\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    const [flagLineWrap, setFlagLineWrap] = useLocalStorage('flagLineWrap', 'yes', { raw: true });\n\n    const [refreshUndoRedo, setRefreshUndoRedo] = useState(Date.now());\n\n    const modeForSyntaxHighlighting = (() => {\n        if (flagSyntaxHighlighting === 'yes') {\n            switch (mode) {\n                case mode_css:\n                    return 'css';\n                case mode_csv:\n                    return 'text';\n                case mode_json:\n                    return 'json';\n                case mode_less:\n                    return 'less';\n                case mode_list:\n                    return 'text';\n                default:\n                    return 'text';\n            }\n        } else {\n            return 'text';\n        }\n    })();\n\n    // Save \"editor\" reference for later usage.\n    const editorRef = useRef(null);\n\n    return (\n        <div style={style} className={styles.TextList}>\n            <div style={{ marginTop: 10 }}>\n                <div\n                    className={styles.translucentWithoutHover}\n                    style={{ display: 'flex', justifyContent: 'space-between' }}\n                >\n                    <div style={{ display: 'flex' }}>\n                        {/* Cut button */}\n                        <IconButton\n                            title=\"Cut\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform cut operation\n                                    editor.execCommand('cut');\n                                }\n                            }}\n                        >\n                            <ContentCutIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Copy button */}\n                        <IconButton\n                            title=\"Copy\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform copy operation\n                                    editor.execCommand('copy');\n                                }\n                            }}\n                        >\n                            <ContentCopyIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Clear button */}\n                        <IconButton\n                            title=\"Clear\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    const selectedText = editor.getSelectedText();\n\n                                    if (selectedText) {\n                                        // If there is selected text, then clear only the selected text.\n                                        editor.execCommand('inserttext', { text: '' });\n                                    } else {\n                                        editor.setValue('');\n                                    }\n                                }\n                            }}\n                        >\n                            <BackspaceIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Undo button */}\n                        <IconButton\n                            title=\"Undo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasUndo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('undo');\n                                }\n                            }}\n                        >\n                            <UndoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Redo button */}\n                        <IconButton\n                            title=\"Redo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasRedo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('redo');\n                                }\n                            }}\n                        >\n                            <RedoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Line wrap button */}\n                        <IconButton\n                            title=\"Toggle line wrap\"\n                            size=\"small\"\n                            onClick={() => {\n                                // Raw code for toggling line wrap:\n                                //     editor.getSession().setUseWrapMode(!editor.getSession().getUseWrapMode());\n                                setFlagLineWrap(flagLineWrap === 'yes' ? 'no' : 'yes');\n                            }}\n                        >\n                            <WrapTextIcon\n                                style={{\n                                    fontSize: 16,\n                                    color: flagLineWrap === 'yes' ? '#1976d2' : undefined\n                                }}\n                            />\n                        </IconButton>\n\n                        {/* TODO: Full screen button */}\n\n                        {/* Save button */}\n                        <IconButton\n                            title=\"Save\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    const input = editor.getValue();\n                                    const blob = new Blob([input], { type: 'text/plain' });\n                                    const a = document.createElement('a');\n                                    a.href = URL.createObjectURL(blob);\n                                    let extension;\n                                    switch (mode) {\n                                        case mode_css:\n                                            extension = 'css';\n                                            break;\n                                        case mode_csv:\n                                            extension = 'csv';\n                                            break;\n                                        case mode_json:\n                                            extension = 'json';\n                                            break;\n                                        case mode_less:\n                                            extension = 'less';\n                                            break;\n                                        default:\n                                            extension = 'txt';\n                                    }\n                                    const localTime = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60 * 1000)).toISOString().substring(0, 19).replace('T', ' ');\n                                    const localTimeAsPartOfFilename = localTime.replace(' ', '_').replace(/:/g, '-');\n                                    a.download = `output-${localTimeAsPartOfFilename}.${extension}`;\n                                    a.click();\n                                }\n                            }}\n                        >\n                            <SaveIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n                    </div>\n                    <div style={{ display: 'flex' }}>\n                        <div>\n                            {(() => {\n                                const disabled = (() => {\n                                    if (\n                                        mode === mode_json ||\n                                        mode === mode_css ||\n                                        mode === mode_less\n                                    ) {\n                                        return false;\n                                    } else {\n                                        return true;\n                                    }\n                                })();\n                                let title;\n                                if (disabled) {\n                                    title = 'Syntax highlighting not available for this mode';\n                                } else {\n                                    if (flagSyntaxHighlighting === 'yes') {\n                                        title = 'Disable syntax highlighting';\n                                    } else {\n                                        title = 'Enable syntax highlighting';\n                                    }\n                                }\n\n                                return (\n                                    <IconButton\n                                        size=\"small\"\n                                        title={title}\n                                        // style={{ marginLeft: 5 }}\n                                        onClick={() => {\n                                            if (disabled) {\n                                                // TODO: Show a tooltip message\n                                            } else {\n                                                setFlagSyntaxHighlighting(\n                                                    flagSyntaxHighlighting === 'yes' ? 'no' : 'yes'\n                                                );\n                                            }\n                                        }}\n                                    >\n                                        {(() => {\n                                            let Icon;\n                                            if (flagSyntaxHighlighting === 'yes') {\n                                                Icon = BorderColorIcon;\n                                            } else {\n                                                Icon = BorderColorOutlinedIcon;\n                                            }\n\n                                            let color;\n                                            if (disabled) {\n                                                color = '#ccc';\n                                            } else {\n                                                if (flagSyntaxHighlighting === 'yes') {\n                                                    color = '#1976d2';\n                                                } else {\n                                                    color = undefined;\n                                                }\n                                            }\n\n                                            return <Icon style={{ fontSize: 16, color }} />;\n                                        })()}\n                                    </IconButton>\n                                );\n                            })()}\n                        </div>\n                        <div style={{ marginLeft: 5 }}>\n                            <Select\n                                native\n                                value={mode}\n                                style={{\n                                    width: 75,\n                                    height: 24,\n                                    fontSize: 11\n                                }}\n                                onChange={(e) => {\n                                    setStoredMode(e.target.value);\n                                    setSearchParams({\n                                        ...searchParams,\n                                        mode: e.target.value\n                                    });\n                                }}\n                            >\n                                <option value={mode_css}>CSS</option>\n                                <option value={mode_csv}>CSV</option>\n                                <option value={mode_json}>JSON</option>\n                                <option value={mode_less}>Less</option>\n                                <option value={mode_list}>List</option>\n                            </Select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div>\n                    <AceEditor\n                        placeholder={placeholder}\n                        setOptions={{\n                            // useWorker: false,\n                            // enableBasicAutocompletion: true,\n                            // enableLiveAutocompletion: true,\n                            // enableSnippets: true,\n                            // showLineNumbers: true,\n                            // tabSize: 4,\n                            // useSoftTabs: true,\n\n                            wrap: flagLineWrap === 'yes' ? true : false\n                        }}\n                        mode={modeForSyntaxHighlighting}\n                        theme=\"github\"\n                        onLoad={(editor) => {\n                            editorRef.current = editor;\n                            if (typeof onLoad === 'function') {\n                                onLoad(editor);\n                            }\n                        }}\n                        onChange={(evt) => {\n                            setRefreshUndoRedo(Date.now());\n                            if (typeof onValueUpdate === 'function') {\n                                onValueUpdate(evt.target.value);\n                            }\n                        }}\n                        editorProps={{ $blockScrolling: true }}\n                        width={editorWidth}\n                        height={editorHeight}\n                    />\n\n                </div>\n                {\n                    allowFileInput &&\n                    <div style={{ marginTop: 10 }}>\n                        <input type=\"file\" />\n                    </div>\n                }\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between'\n                    }}\n                >\n                    <div>\n                        <Select\n                            native\n                            style={{\n                                width: 220,\n                                height: 28,\n                                fontSize: 11\n                            }}\n                            value={selectedOperations[mode]}\n                            onChange={(e) => {\n                                const json = JSON.parse(JSON.stringify(selectedOperations));\n                                json[mode] = e.target.value;\n                                setSelectedOperations(json);\n                            }}\n                        >\n                            <option\n                                value=\"\"\n                                style={{ color: '#777' }}\n                            >\n                                -- Operations --\n                            </option>\n\n                            {\n                                mode === mode_css &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$css_sample_css}>\n                                            Sample CSS\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$css_formatCss}>\n                                            Format CSS\n                                        </option>\n                                        <option value={$css_minifyCss}>\n                                            Minify CSS\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$css_cssToScss}>\n                                            CSS to SCSS\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_less &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$less_sample_less}>\n                                            Sample Less\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$less_formatLess}>\n                                            Format Less\n                                        </option>\n                                        <option value={$less_minifyLess}>\n                                            Minify Less\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$less_lessToCss}>\n                                            Less to CSS\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_list &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$list_sample_list}>\n                                            Sample list\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Lines\">\n                                        <option value={$list_removeEmptyLines}>\n                                            Remove empty lines\n                                        </option>\n                                        <option value={$list_removeDuplicates}>\n                                            Remove duplicates\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Sort\">\n                                        <option value={$list_sort}>\n                                            Sort\n                                        </option>\n                                        <option value={$list_caseInsensitiveSort}>\n                                            Case-insensitive sort\n                                        </option>\n                                        <option value={$list_naturalSort}>\n                                            Natural sort\n                                        </option>\n                                        <option value={$list_randomize}>\n                                            Randomize\n                                        </option>\n                                        <option value={$list_reverse}>\n                                            Reverse\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"String\">\n                                        <option value={$list_trimLines}>\n                                            Trim lines\n                                        </option>\n                                        <option value={$list_removeCommaCharacterAtLineEnds}>\n                                            Remove comma character at line ends\n                                        </option>\n                                        <option value={$list_removeQuoteAndApostropheCharacters}>\n                                            Remove &quot; and &apos; characters\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Stats\">\n                                        <option value={$list_getStats}>\n                                            Get Stats\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Transform\">\n                                        <option value={$list_linesToJsonArray}>\n                                            Lines to JSON Array\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_csv &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$csv_sample_csv}>\n                                            Sample CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Columns\">\n                                        <option value={$csv_removeFirstColumnFromCsv}>\n                                            Remove first column from CSV\n                                        </option>\n                                        <option value={$csv_removeLastColumnFromCsv}>\n                                            Remove last column from CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$csv_csvToJson}>\n                                            CSV to JSON\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_json &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$json_sample_json}>\n                                            Sample JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$json_formatJson}>\n                                            Format JSON\n                                        </option>\n                                        <option value={$json_minifyJson}>\n                                            Minify JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Edit\">\n                                        <option value={$json_removeProperty}>\n                                            Remove property\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Sort\">\n                                        <option value={$json_sortJson}>\n                                            Sort JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Fix\">\n                                        <option value={$json_fixDataTypes}>\n                                            Fix data types\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$json_jsonToLines}>\n                                            JSON to Lines\n                                        </option>\n                                        <option value={$json_jsonToCsv}>\n                                            JSON to CSV\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                        </Select>\n                    </div>\n                    <div style={{ marginLeft: 5 }}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"small\"\n                            startIcon={<CheckIcon />}\n                            disabled={operation === ''}\n                            onClick={async () => {\n                                const operationsByUser = [\n                                    operation,\n                                    ...recentOperations\n                                ];\n                                // Remove duplicate operations (keep the first occurrence)\n                                const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                    return operationsByUser.indexOf(operation) === index;\n                                });\n                                setRecentOperations(uniqueOperationsByUser);\n                                localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                const getInputValue = () => {\n                                    const value = editorRef.current.getValue();\n                                    return value;\n                                };\n                                const [err, output, extraInfo] = await performOperation({\n                                    getInputValue,\n                                    operation\n                                });\n\n                                if (err) {\n                                    console.error(err);\n                                    alert(err.message); // eslint-disable-line no-alert\n\n                                    if (extraInfo && extraInfo.moveCursorTo) {\n                                        // editorRef.current.moveCursorTo(\n                                        //     extraInfo.moveCursorTo.row,\n                                        //     extraInfo.moveCursorTo.column\n                                        // );\n                                        editorRef.current.moveCursorToPosition({\n                                            row: extraInfo.moveCursorTo.row,\n                                            column: extraInfo.moveCursorTo.column\n                                        });\n\n                                        editorRef.current.focus();\n                                    }\n                                } else {\n                                    if (output === null) {\n                                        alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                    } else {\n                                        editorRef.current.setValue(output);\n                                        if (typeof onValueUpdate === 'function') {\n                                            onValueUpdate(output);\n                                        }\n                                    }\n                                }\n                            }}\n                        >\n                            Apply\n                        </Button>\n                    </div>\n                </div>\n                {\n                    recentOperations.length > 0 &&\n                    <div style={{ marginTop: 10 }}>\n                        <div\n                            style={{\n                                display: 'flex',\n                                backgroundColor: '#f5f5f5',\n                                border: '1px solid #e0e0e0',\n                                borderRadius: 999\n                            }}\n                        >\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', fontSize: 12 }}>\n                                <IconButton\n                                    size=\"small\"\n                                    title=\"Reset suggested operations\"\n                                    onClick={() => {\n                                        setRecentOperations(defaultRecommendedOperations);\n                                        localStorage.setItem('recentOperations', JSON.stringify([]));\n                                    }}\n                                >\n                                    <StarIcon style={{ fontSize: 16 }} />\n                                </IconButton>\n                            </div>\n                            <div\n                                style={{\n                                    borderRight: '1px solid #e0e0e0'\n                                }}\n                            ></div>\n                            <div\n                                style={{\n                                    backgroundColor: '#fff',\n                                    width: '100%',\n                                    borderTopRightRadius: 999,\n                                    borderBottomRightRadius: 999\n                                }}\n                            >\n                                <RecentOperations\n                                    editorRef={editorRef}\n                                    onValueUpdate={onValueUpdate}\n                                    mode={mode}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\nTextList.propTypes = {\n    placeholder: PropTypes.string,\n    onLoad: PropTypes.func,\n    onValueUpdate: PropTypes.func,\n    allowFileInput: PropTypes.bool,\n    style: PropTypes.object,\n    editorWidth: PropTypes.string,\n    editorHeight: PropTypes.string\n};\n\nexport { TextList };\n","// extracted by mini-css-extract-plugin\nexport default {\"ListOperations\":\"ListOperations__ListOperations--VCX0Q\"};","import React, { useRef } from 'react';\n\nimport {\n    intersection,\n    union,\n    difference\n} from 'lodash';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport SwapHorizontalCircleRoundedIcon from '@mui/icons-material/SwapHorizontalCircleRounded.js';\n\nimport Button from '@mui/material/Button/index.js';\n\nimport { TextList } from './TextList/TextList.js';\n\nimport styles from './ListOperations.css';\n\nconst performABToC = ({\n    editorARef,\n    editorBRef,\n    editorCRef,\n    operation\n}) => {\n    const valueA = editorARef.current.getValue();\n    const valueB = editorBRef.current.getValue();\n\n    const a = valueA.split('\\n');\n    const b = valueB.split('\\n');\n\n    let c = '';\n\n    if (operation === 'append') {\n        c = [...a, ...b];\n    } else if (operation === 'union') {\n        c = union(a, b);\n    } else if (operation === 'intersection') {\n        c = intersection(a, b);\n    } else if (operation === 'difference') {\n        c = difference(a, b);\n    }\n\n    const valueC = c.join('\\n');\n\n    // Update C\n    editorCRef.current.setValue(valueC);\n};\n\nconst ListOperations = function () {\n    const editorARef = useRef(null);\n    const editorBRef = useRef(null);\n    const editorCRef = useRef(null);\n\n    return (\n        <div className={styles.ListOperations}>\n            <div style={{ display: 'flex', justifyContent: 'center', minWidth: 1120 }}>\n                <div>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        A\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorARef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <IconButton\n                            variant=\"filled\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => {\n                                const valueA = editorARef.current.getValue();\n                                const valueB = editorBRef.current.getValue();\n\n                                // Swap values\n                                editorARef.current.setValue(valueB);\n                                editorBRef.current.setValue(valueA);\n                            }}\n                        >\n                            <SwapHorizontalCircleRoundedIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        B\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorBRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block' }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'append'\n                                });\n                            }}\n                        >\n                            A + B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'intersection'\n                                });\n                            }}\n                        >\n                            A ∩ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'union'\n                                });\n                            }}\n                        >\n                            A ∪ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'difference'\n                                });\n                            }}\n                        >\n                            A − B\n                        </Button>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        C\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Result of the operation will be available here\"\n                            onLoad={(editor) => {\n                                editorCRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { ListOperations };\n","import React from 'react';\n\nimport { ListOperations } from './ListOperations/ListOperations.js';\n\nimport styles from './Dashboard.css';\n\nconst Dashboard = () => {\n    return (\n        <div className={styles.Dashboard}>\n            <div style={{ marginTop: 45 }}>\n                <ListOperations />\n            </div>\n        </div>\n    );\n};\n\nexport { Dashboard };\n","// extracted by mini-css-extract-plugin\nexport default {\"Dashboard\":\"Dashboard__Dashboard--d2pNX\"};","import React from 'react';\n\nimport styles from './PageFooter.css';\n\nimport { CreatedByMessage } from 'generic-components/CreatedByMessage/CreatedByMessage.js';\n\nclass PageFooter extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageFooter}>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 45,\n                        marginBottom: 20\n                    }}\n                >\n                    <div>\n                        <div>\n                            <CreatedByMessage />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageFooter };\n","// extracted by mini-css-extract-plugin\nexport default {\"PageFooter\":\"PageFooter__PageFooter--yI25Y\"};","import React from 'react';\n\nimport {\n    createBrowserRouter,\n    RouterProvider\n} from 'react-router-dom';\n\nimport './styles-reset.css';\nimport './App.css';\n\nimport { PageHeader } from './PageHeader/PageHeader.js';\nimport { Dashboard } from './Dashboard/Dashboard.js';\nimport { PageFooter } from './PageFooter/PageFooter.js';\n\nconst router = createBrowserRouter([\n    {\n        // Currently, using it as SPA with query parameters, so all routes are the same. In local development, the path\n        // is `/`, but in GitHub Pages, the path is `/transformers/` (https://webextensions.github.io/transformers/),\n        // so, `window.location.pathname` matches that in the URL.\n        path: window.location.pathname,\n\n        element: (\n            <div>\n                <PageHeader />\n                <div>\n                    <Dashboard />\n                </div>\n                <PageFooter />\n            </div>\n        )\n    }\n]);\n\nclass App extends React.Component {\n    render() {\n        return (\n            <RouterProvider router={router} />\n        );\n    }\n}\n\nexport { App };\n","/* eslint-disable filenames/no-index */\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client'; // eslint-disable-line node/file-extension-in-import\n\nimport './index.css';\n\nimport { App } from './App/App.js';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"chunk.\" + \"lessNpmPackage\" + \".\" + \"e393786a894ce095e023\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktransformers\"] = self[\"webpackChunktransformers\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [360,375], () => (__webpack_require__(28845)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","window","less","onReady","PageHeader","React","render","className","style","display","flexDirection","alignItems","marginTop","margin","textAlign","fontVariant","letterSpacing","fontSize","color","mode_css","mode_csv","mode_json","mode_less","mode_list","modes","$css_sample_css","$css_formatCss","$css_minifyCss","$css_cssToScss","$list_sample_list","$list_removeEmptyLines","$list_removeDuplicates","$list_sort","$list_caseInsensitiveSort","$list_naturalSort","$list_randomize","$list_reverse","$list_trimLines","$list_removeCommaCharacterAtLineEnds","$list_removeQuoteAndApostropheCharacters","$list_getStats","$list_linesToJsonArray","$csv_sample_csv","$csv_removeFirstColumnFromCsv","$csv_removeLastColumnFromCsv","$csv_csvToJson","$json_sample_json","$json_formatJson","$json_minifyJson","$json_removeProperty","$json_sortJson","$json_fixDataTypes","$json_jsonToLines","$json_jsonToCsv","$less_sample_less","$less_formatLess","$less_minifyLess","$less_lessToCss","defaultRecommendedOperations","IconNotAvailable","CircleIcon","availableOperations","message","Icon","AppRegistrationIcon","MoodIcon","CompressIcon","DataObjectIcon","FirstPageIcon","LastPageIcon","PlaylistRemoveIcon","CategoryIcon","BuildIcon","ReorderIcon","AppsIcon","SettingsEthernetIcon","CopyAllIcon","SortIcon","AbcIcon","ParkIcon","ShuffleOnIcon","KeyboardDoubleArrowDownIcon","CommitIcon","CleaningServicesIcon","FormatQuoteIcon","BarChartIcon","allOperationsById","mode","operationsForMode","operationId","id","allOperationIds","Object","keys","recentOperationsFromLocalStorage","localStorage","getItem","recentOperations","JSON","parse","Array","isArray","err","console","error","filter","operation","includes","recentOperationsAtom","atom","trimLine","line","trim","removeCommaCharacterAtEndFromLine","char","length","substring","removeMatchingCharacterAtEndFromLine","removeQuoteAndApostropheCharactersFromLine","replaceAll","removeLastColumnFromCsvLine","columns","split","pop","join","removeFirstColumnFromCsvLine","shift","traverseNode","root","transform","output","key","fixDataTypes","json","node","String","Number","map","item","performOperation","async","getInputValue","input","extraInfo","beautifyCss","minifyCss","cssToScss","alert","lazyLoadLess","css","e","Error","column","index","moveCursorTo","row","position","jsonInput","stringify","removePropertyRecursively","obj","propertyName","hasOwnProperty","forEach","prompt","jsonStableStringify","space","every","push","ob","jsonToCsv","lines","removeFirstColumnFromCsvLines","removeLastColumnFromCsvLines","headers","i","j","csvToJson","x","removeEmptyLines","Set","removeDuplicates","sort","a","b","toLowerCase","localeCompare","undefined","numeric","Math","random","reverse","trimLines","removeCommaCharacterAtEndFromLines","removeQuoteAndApostropheCharactersFromLines","stats","linesCount","charactersCount","words","replace","wordsCount","uniqueWordsCount","size","RecentOperations","editorRef","onValueUpdate","setRecentOperations","useAtom","width","overflow","paddingLeft","IconButton","title","onClick","operationsByUser","uniqueOperationsByUser","indexOf","setItem","current","getValue","setValue","propTypes","PropTypes","copy","simpleText","navigator","clipboard","writeText","TextList","placeholder","onLoad","allowFileInput","editorWidth","editorHeight","storedMode","setStoredMode","useLocalStorage","raw","searchParams","setSearchParams","useSearchParams","useEffect","get","selectedOperations","setSelectedOperations","flagSyntaxHighlighting","setFlagSyntaxHighlighting","flagLineWrap","setFlagLineWrap","refreshUndoRedo","setRefreshUndoRedo","useState","Date","now","modeForSyntaxHighlighting","useRef","justifyContent","editor","selectedText","getSelectedText","selectAll","execCommand","ContentCut","ContentCopy","text","Backspace","disabled","getSession","getUndoManager","hasUndo","Undo","hasRedo","Redo","WrapText","blob","Blob","type","document","createElement","extension","href","URL","createObjectURL","localTimeAsPartOfFilename","getTimezoneOffset","toISOString","download","click","Save","BorderColorIcon","BorderColorOutlinedIcon","marginLeft","Select","native","value","height","onChange","target","setOptions","wrap","theme","evt","editorProps","$blockScrolling","label","Button","variant","startIcon","Check","moveCursorToPosition","focus","backgroundColor","border","borderRadius","Star","borderRight","borderTopRightRadius","borderBottomRightRadius","performABToC","editorARef","editorBRef","editorCRef","valueA","valueB","c","union","intersection","difference","valueC","ListOperations","minWidth","fontFamily","SwapHorizontalCircleRounded","Dashboard","PageFooter","marginBottom","CreatedByMessage","router","createBrowserRouter","path","location","pathname","element","App","container","getElementById","createRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdD","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","splice","r","n","getter","__esModule","d","getPrototypeOf","t","this","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","appendChild","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","currentScript","p","installedChunks","installedChunkData","promise","resolve","reject","errorType","realSrc","name","request","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}