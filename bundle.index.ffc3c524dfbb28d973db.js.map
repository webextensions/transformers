{"version":3,"file":"bundle.index.ffc3c524dfbb28d973db.js","mappings":"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","sources":["webpack://transformers/webpack/runtime/chunk loaded","webpack://transformers/webpack/runtime/create fake namespace object","webpack://transformers/./src/App/App.js","webpack://transformers/./src/App/Dashboard/Dashboard.js","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/JotaiState.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/RecentOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/constOperations.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/performOperation.js","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/textUtils.js","webpack://transformers/./src/App/PageFooter/PageFooter.js","webpack://transformers/./src/App/PageHeader/PageHeader.js","webpack://transformers/./src/index.js","webpack://transformers/./src/App/App.css","webpack://transformers/./src/App/Dashboard/Dashboard.css?d7b8","webpack://transformers/./src/App/Dashboard/ListOperations/ListOperations.css?a3ee","webpack://transformers/./src/App/Dashboard/ListOperations/TextList/TextList.css?4456","webpack://transformers/./src/App/PageFooter/PageFooter.css?9170","webpack://transformers/./src/App/PageHeader/PageHeader.css?080f","webpack://transformers/./src/App/styles-reset.css?edc7","webpack://transformers/./src/index.css?6e9e","webpack://transformers/webpack/bootstrap","webpack://transformers/webpack/runtime/amd define","webpack://transformers/webpack/runtime/compat get default export","webpack://transformers/webpack/runtime/define property getters","webpack://transformers/webpack/runtime/global","webpack://transformers/webpack/runtime/hasOwnProperty shorthand","webpack://transformers/webpack/runtime/make namespace object","webpack://transformers/webpack/runtime/node module decorator","webpack://transformers/webpack/runtime/publicPath","webpack://transformers/webpack/runtime/jsonp chunk loading","webpack://transformers/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import React from 'react';\n\nimport './styles-reset.css';\nimport './App.css';\n\nimport { PageHeader } from './PageHeader/PageHeader.js';\nimport { Dashboard } from './Dashboard/Dashboard.js';\nimport { PageFooter } from './PageFooter/PageFooter.js';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div>\n                <PageHeader />\n                <div>\n                    <Dashboard />\n                </div>\n                <PageFooter />\n            </div>\n        );\n    }\n}\n\nexport { App };\n","import React from 'react';\n\nimport { ListOperations } from './ListOperations/ListOperations.js';\n\nimport styles from './Dashboard.css';\n\nconst Dashboard = () => {\n    return (\n        <div className={styles.Dashboard}>\n            <div style={{ marginTop: 45 }}>\n                <ListOperations />\n            </div>\n        </div>\n    );\n};\n\nexport { Dashboard };\n","import React, { useRef } from 'react';\n\nimport {\n    intersection,\n    union,\n    difference\n} from 'lodash';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport SwapHorizontalCircleRoundedIcon from '@mui/icons-material/SwapHorizontalCircleRounded.js';\n\nimport Button from '@mui/material/Button/index.js';\n\nimport { TextList } from './TextList/TextList.js';\n\nimport styles from './ListOperations.css';\n\nconst performABToC = ({\n    editorARef,\n    editorBRef,\n    editorCRef,\n    operation\n}) => {\n    const valueA = editorARef.current.getValue();\n    const valueB = editorBRef.current.getValue();\n\n    const a = valueA.split('\\n');\n    const b = valueB.split('\\n');\n\n    let c = '';\n\n    if (operation === 'append') {\n        c = [...a, ...b];\n    } else if (operation === 'union') {\n        c = union(a, b);\n    } else if (operation === 'intersection') {\n        c = intersection(a, b);\n    } else if (operation === 'difference') {\n        c = difference(a, b);\n    }\n\n    const valueC = c.join('\\n');\n\n    // Update C\n    editorCRef.current.setValue(valueC);\n};\n\nconst ListOperations = function () {\n    const editorARef = useRef(null);\n    const editorBRef = useRef(null);\n    const editorCRef = useRef(null);\n\n    return (\n        <div className={styles.ListOperations}>\n            <div style={{ display: 'flex', justifyContent: 'center', minWidth: 1120 }}>\n                <div>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        A\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorARef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <IconButton\n                            variant=\"filled\"\n                            color=\"primary\"\n                            size=\"small\"\n                            onClick={() => {\n                                const valueA = editorARef.current.getValue();\n                                const valueB = editorBRef.current.getValue();\n\n                                // Swap values\n                                editorARef.current.setValue(valueB);\n                                editorBRef.current.setValue(valueA);\n                            }}\n                        >\n                            <SwapHorizontalCircleRoundedIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        B\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Provide text here\"\n                            onLoad={(editor) => {\n                                editorBRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                            // allowFileInput\n                        />\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div style={{ textAlign: 'center' }}>&nbsp;</div>\n                    <div\n                        style={{\n                            marginTop: 55,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            justifyContent: 'center',\n                            height: '300px'\n                        }}\n                    >\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block' }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'append'\n                                });\n                            }}\n                        >\n                            A + B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'intersection'\n                                });\n                            }}\n                        >\n                            A ∩ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'union'\n                                });\n                            }}\n                        >\n                            A ∪ B\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            size=\"small\"\n                            type=\"button\"\n                            style={{ display: 'block', marginTop: 5 }}\n                            onClick={() => {\n                                performABToC({\n                                    editorARef,\n                                    editorBRef,\n                                    editorCRef,\n                                    operation: 'difference'\n                                });\n                            }}\n                        >\n                            A − B\n                        </Button>\n                    </div>\n                </div>\n                <div style={{ marginLeft: 10 }}>\n                    <div\n                        style={{\n                            textAlign: 'center',\n                            fontFamily: '\"Transformers\", sans-serif',\n                            fontSize: 20\n                        }}\n                    >\n                        C\n                    </div>\n                    <div>\n                        <TextList\n                            placeholder=\"Result of the operation will be available here\"\n                            onLoad={(editor) => {\n                                editorCRef.current = editor;\n                            }}\n                            style={{ marginTop: 5 }}\n                            editorWidth=\"320px\"\n                            editorHeight=\"300px\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport { ListOperations };\n","import { atom } from 'jotai';\n\nimport {\n    allOperationIds,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nconst recentOperationsFromLocalStorage = localStorage.getItem('recentOperations');\n\nlet recentOperations = [];\ntry {\n    recentOperations = JSON.parse(recentOperationsFromLocalStorage);\n    if (!Array.isArray(recentOperations)) {\n        recentOperations = defaultRecommendedOperations;\n    }\n} catch (err) {\n    console.error(err);\n}\n\n// Remove operations that are not available anymore with that name\nrecentOperations.filter(operation => {\n    return allOperationIds.includes(operation);\n});\n\nconst recentOperationsAtom = atom(recentOperations);\n\nexport { recentOperationsAtom };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useAtom } from 'jotai';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\n\nimport {\n    IconNotAvailable,\n\n    availableOperations,\n    allOperationsById\n} from './constOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nconst RecentOperations = function ({\n    editorRef,\n    onValueUpdate,\n    mode\n}) {\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                width: 291,\n                overflow: 'hidden',\n                paddingLeft: 10\n            }}\n        >\n            {\n                recentOperations\n                    .filter(operation => {\n                        const operationsForMode = availableOperations[mode];\n                        return operationsForMode[operation];\n                    })\n                    .map((operation, index) => {\n                        const operationsForMode = availableOperations[mode];\n                        return (\n                            <div key={index}>\n                                <IconButton\n                                    size=\"small\"\n                                    title={(\n                                        operationsForMode[operation]?.message ||\n                                        operation\n                                    )}\n                                    onClick={async () => {\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const operationsByUser = [\n                                            operation,\n                                            ...recentOperations\n                                        ];\n                                        // Remove duplicate operations (keep the first occurrence)\n                                        const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                            return operationsByUser.indexOf(operation) === index;\n                                        });\n                                        setRecentOperations(uniqueOperationsByUser);\n                                        localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                        // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                        const getInputValue = () => {\n                                            const value = editorRef.current.getValue();\n                                            return value;\n                                        };\n                                        const [err, output, extraInfo] = await performOperation({\n                                            getInputValue,\n                                            operation\n                                        });\n\n                                        if (err) {\n                                            console.error(err);\n                                            alert(err.message); // eslint-disable-line no-alert\n                                        } else {\n                                            if (output === null) {\n                                                alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                            } else {\n                                                editorRef.current.setValue(output);\n                                                if (typeof onValueUpdate === 'function') {\n                                                    onValueUpdate(output);\n                                                }\n                                            }\n                                        }\n                                    }}\n                                >\n                                    {(() => {\n                                        let Icon = allOperationsById[operation]?.Icon;\n                                        if (!Icon) {\n                                            Icon = IconNotAvailable;\n                                        }\n                                        return <Icon style={{ fontSize: 16 }} />;\n                                    })()}\n                                </IconButton>\n                            </div>\n                        );\n                    })\n            }\n        </div>\n    );\n};\nRecentOperations.propTypes = {\n    editorRef: PropTypes.object.isRequired,\n    onValueUpdate: PropTypes.func,\n    mode: PropTypes.string.isRequired\n};\n\nexport { RecentOperations };\n","import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/webpack-resolver.js'; // https://github.com/securingsincity/react-ace/issues/725#issuecomment-543109155\nimport 'ace-builds/src-noconflict/mode-json.js';\nimport 'ace-builds/src-noconflict/theme-github.js';\n// import 'ace-builds/src-noconflict/ext-language_tools.js';\n\nimport IconButton from '@mui/material/IconButton/index.js';\nimport Button from '@mui/material/Button/index.js';\n\nimport BorderColorOutlinedIcon from '@mui/icons-material/BorderColorOutlined.js';\nimport BorderColorIcon from '@mui/icons-material/BorderColor.js';\n\nimport ContentCutIcon from '@mui/icons-material/ContentCut.js';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy.js';\nimport BackspaceIcon from '@mui/icons-material/Backspace.js';\nimport UndoIcon from '@mui/icons-material/Undo.js';\nimport RedoIcon from '@mui/icons-material/Redo.js';\nimport WrapTextIcon from '@mui/icons-material/WrapText.js';\nimport SaveIcon from '@mui/icons-material/Save.js';\n\nimport Select from '@mui/material/Select/index.js';\n\nimport CheckIcon from '@mui/icons-material/Check.js';\n\nimport StarIcon from '@mui/icons-material/Star.js';\n\nimport { useAtom } from 'jotai';\n\nimport { useLocalStorage } from 'react-use';\n\nimport { recentOperationsAtom } from './JotaiState.js';\n\nimport {\n    mode_csv,\n    mode_json,\n    mode_list,\n\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv,\n\n    defaultRecommendedOperations\n} from './constOperations.js';\n\nimport { RecentOperations } from './RecentOperations.js';\n\nimport { performOperation } from './performOperation.js';\n\nimport styles from './TextList.css';\n\nconst copy = async function (simpleText) {\n    try {\n        await navigator.clipboard.writeText(simpleText);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nconst TextList = function ({\n    placeholder,\n    onLoad,\n    onValueUpdate,\n    allowFileInput,\n    style,\n    editorWidth,\n    editorHeight\n}) {\n    const [mode, setMode] = useLocalStorage('mode', mode_list, { raw: true });\n\n    const [selectedOperations, setSelectedOperations] = useLocalStorage('selectedOperations', {\n        [mode_csv]: '',\n        [mode_json]: '',\n        [mode_list]: ''\n    });\n\n    const operation = selectedOperations[mode];\n\n    const [flagSyntaxHighlighting, setFlagSyntaxHighlighting] = useLocalStorage('flagSyntaxHighlighting', 'yes', { raw: true });\n\n    const [recentOperations, setRecentOperations] = useAtom(recentOperationsAtom);\n\n    const [flagLineWrap, setFlagLineWrap] = useLocalStorage('flagLineWrap', 'yes', { raw: true });\n\n    const [refreshUndoRedo, setRefreshUndoRedo] = useState(Date.now());\n\n    const modeForSyntaxHighlighting = (() => {\n        if (flagSyntaxHighlighting === 'yes') {\n            switch (mode) {\n                case mode_csv:\n                    return 'text';\n                case mode_json:\n                    return 'json';\n                case mode_list:\n                    return 'text';\n                default:\n                    return 'text';\n            }\n        } else {\n            return 'text';\n        }\n    })();\n\n    // Save \"editor\" reference for later usage.\n    const editorRef = useRef(null);\n\n    return (\n        <div style={style} className={styles.TextList}>\n            <div style={{ marginTop: 10 }}>\n                <div\n                    className={styles.translucentWithoutHover}\n                    style={{ display: 'flex', justifyContent: 'space-between' }}\n                >\n                    <div style={{ display: 'flex' }}>\n                        {/* Cut button */}\n                        <IconButton\n                            title=\"Cut\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform cut operation\n                                    editor.execCommand('cut');\n                                }\n                            }}\n                        >\n                            <ContentCutIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Copy button */}\n                        <IconButton\n                            title=\"Copy\"\n                            size=\"small\"\n                            onClick={async () => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    let selectedText = editor.getSelectedText();\n\n                                    if (!selectedText) {\n                                        // If there is no selected text, then select all text.\n                                        editor.selectAll();\n                                        selectedText = editor.getSelectedText();\n                                    }\n\n                                    // Copy selected contents to clipboard\n                                    await copy(selectedText);\n\n                                    // Perform copy operation\n                                    editor.execCommand('copy');\n                                }\n                            }}\n                        >\n                            <ContentCopyIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Clear button */}\n                        <IconButton\n                            title=\"Clear\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    // Check if there is any selected text\n                                    const selectedText = editor.getSelectedText();\n\n                                    if (selectedText) {\n                                        // If there is selected text, then clear only the selected text.\n                                        editor.execCommand('inserttext', { text: '' });\n                                    } else {\n                                        editor.setValue('');\n                                    }\n                                }\n                            }}\n                        >\n                            <BackspaceIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Undo button */}\n                        <IconButton\n                            title=\"Undo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasUndo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('undo');\n                                }\n                            }}\n                        >\n                            <UndoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Redo button */}\n                        <IconButton\n                            title=\"Redo\"\n                            size=\"small\"\n                            disabled={refreshUndoRedo && (() => {\n                                if (\n                                    editorRef.current &&\n                                    editorRef.current.getSession().getUndoManager().hasRedo()\n                                ) {\n                                    return false;\n                                } else {\n                                    return true;\n                                }\n                            })()}\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    editor.execCommand('redo');\n                                }\n                            }}\n                        >\n                            <RedoIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n\n                        {/* Line wrap button */}\n                        <IconButton\n                            title=\"Toggle line wrap\"\n                            size=\"small\"\n                            onClick={() => {\n                                // Raw code for toggling line wrap:\n                                //     editor.getSession().setUseWrapMode(!editor.getSession().getUseWrapMode());\n                                setFlagLineWrap(flagLineWrap === 'yes' ? 'no' : 'yes');\n                            }}\n                        >\n                            <WrapTextIcon\n                                style={{\n                                    fontSize: 16,\n                                    color: flagLineWrap === 'yes' ? '#1976d2' : undefined\n                                }}\n                            />\n                        </IconButton>\n\n                        {/* TODO: Full screen button */}\n\n                        {/* Save button */}\n                        <IconButton\n                            title=\"Save\"\n                            size=\"small\"\n                            onClick={() => {\n                                const editor = editorRef.current;\n                                if (editor) {\n                                    const input = editor.getValue();\n                                    const blob = new Blob([input], { type: 'text/plain' });\n                                    const a = document.createElement('a');\n                                    a.href = URL.createObjectURL(blob);\n                                    let extension;\n                                    switch (mode) {\n                                        case mode_json:\n                                            extension = 'json';\n                                            break;\n                                        case mode_csv:\n                                            extension = 'csv';\n                                            break;\n                                        default:\n                                            extension = 'txt';\n                                    }\n                                    const localTime = (new Date(Date.now() - (new Date()).getTimezoneOffset() * 60 * 1000)).toISOString().substring(0, 19).replace('T', ' ');\n                                    const localTimeAsPartOfFilename = localTime.replace(' ', '_').replace(/:/g, '-');\n                                    a.download = `output-${localTimeAsPartOfFilename}.${extension}`;\n                                    a.click();\n                                }\n                            }}\n                        >\n                            <SaveIcon style={{ fontSize: 16 }} />\n                        </IconButton>\n                    </div>\n                    <div style={{ display: 'flex' }}>\n                        <div>\n                            {(() => {\n                                const disabled = (() => {\n                                    if (mode === mode_json) {\n                                        return false;\n                                    } else {\n                                        return true;\n                                    }\n                                })();\n                                let title;\n                                if (disabled) {\n                                    title = 'Syntax highlighting not available for this mode';\n                                } else {\n                                    if (flagSyntaxHighlighting === 'yes') {\n                                        title = 'Disable syntax highlighting';\n                                    } else {\n                                        title = 'Enable syntax highlighting';\n                                    }\n                                }\n\n                                return (\n                                    <IconButton\n                                        size=\"small\"\n                                        title={title}\n                                        // style={{ marginLeft: 5 }}\n                                        onClick={() => {\n                                            if (disabled) {\n                                                // TODO: Show a tooltip message\n                                            } else {\n                                                setFlagSyntaxHighlighting(\n                                                    flagSyntaxHighlighting === 'yes' ? 'no' : 'yes'\n                                                );\n                                            }\n                                        }}\n                                    >\n                                        {(() => {\n                                            let Icon;\n                                            if (flagSyntaxHighlighting === 'yes') {\n                                                Icon = BorderColorIcon;\n                                            } else {\n                                                Icon = BorderColorOutlinedIcon;\n                                            }\n\n                                            let color;\n                                            if (disabled) {\n                                                color = '#ccc';\n                                            } else {\n                                                if (flagSyntaxHighlighting === 'yes') {\n                                                    color = '#1976d2';\n                                                } else {\n                                                    color = undefined;\n                                                }\n                                            }\n\n                                            return <Icon style={{ fontSize: 16, color }} />;\n                                        })()}\n                                    </IconButton>\n                                );\n                            })()}\n                        </div>\n                        <div style={{ marginLeft: 5 }}>\n                            <Select\n                                native\n                                value={mode}\n                                style={{\n                                    width: 75,\n                                    height: 24,\n                                    fontSize: 11\n                                }}\n                                onChange={(e) => setMode(e.target.value)}\n                            >\n                                <option value={mode_csv}>CSV</option>\n                                <option value={mode_json}>JSON</option>\n                                <option value={mode_list}>List</option>\n                            </Select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div>\n                    <AceEditor\n                        placeholder={placeholder}\n                        setOptions={{\n                            // useWorker: false,\n                            // enableBasicAutocompletion: true,\n                            // enableLiveAutocompletion: true,\n                            // enableSnippets: true,\n                            // showLineNumbers: true,\n                            // tabSize: 4,\n                            // useSoftTabs: true,\n\n                            wrap: flagLineWrap === 'yes' ? true : false\n                        }}\n                        mode={modeForSyntaxHighlighting}\n                        theme=\"github\"\n                        onLoad={(editor) => {\n                            editorRef.current = editor;\n                            if (typeof onLoad === 'function') {\n                                onLoad(editor);\n                            }\n                        }}\n                        onChange={(evt) => {\n                            setRefreshUndoRedo(Date.now());\n                            if (typeof onValueUpdate === 'function') {\n                                onValueUpdate(evt.target.value);\n                            }\n                        }}\n                        editorProps={{ $blockScrolling: true }}\n                        width={editorWidth}\n                        height={editorHeight}\n                    />\n\n                </div>\n                {\n                    allowFileInput &&\n                    <div style={{ marginTop: 10 }}>\n                        <input type=\"file\" />\n                    </div>\n                }\n            </div>\n\n            <div style={{ marginTop: 10 }}>\n                <div\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between'\n                    }}\n                >\n                    <div>\n                        <Select\n                            native\n                            style={{\n                                width: 220,\n                                height: 28,\n                                fontSize: 11\n                            }}\n                            value={selectedOperations[mode]}\n                            onChange={(e) => {\n                                const json = JSON.parse(JSON.stringify(selectedOperations));\n                                json[mode] = e.target.value;\n                                setSelectedOperations(json);\n                            }}\n                        >\n                            <option\n                                value=\"\"\n                                style={{ color: '#777' }}\n                            >\n                                -- Operations --\n                            </option>\n\n                            {\n                                mode === mode_list &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$list_sample_list}>\n                                            Sample list\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Lines\">\n                                        <option value={$list_removeEmptyLines}>\n                                            Remove empty lines\n                                        </option>\n                                        <option value={$list_removeDuplicates}>\n                                            Remove duplicates\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Sort\">\n                                        <option value={$list_sort}>\n                                            Sort\n                                        </option>\n                                        <option value={$list_caseInsensitiveSort}>\n                                            Case-insensitive sort\n                                        </option>\n                                        <option value={$list_naturalSort}>\n                                            Natural sort\n                                        </option>\n                                        <option value={$list_randomize}>\n                                            Randomize\n                                        </option>\n                                        <option value={$list_reverse}>\n                                            Reverse\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"String\">\n                                        <option value={$list_trimLines}>\n                                            Trim lines\n                                        </option>\n                                        <option value={$list_removeCommaCharacterAtLineEnds}>\n                                            Remove comma character at line ends\n                                        </option>\n                                        <option value={$list_removeQuoteAndApostropheCharacters}>\n                                            Remove &quot; and &apos; characters\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Stats\">\n                                        <option value={$list_getStats}>\n                                            Get Stats\n                                        </option>\n                                    </optgroup>\n\n                                    <optgroup label=\"Transform\">\n                                        <option value={$list_linesToJsonArray}>\n                                            Lines to JSON Array\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_csv &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$csv_sample_csv}>\n                                            Sample CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Columns\">\n                                        <option value={$csv_removeFirstColumnFromCsv}>\n                                            Remove first column from CSV\n                                        </option>\n                                        <option value={$csv_removeLastColumnFromCsv}>\n                                            Remove last column from CSV\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$csv_csvToJson}>\n                                            CSV to JSON\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                            {\n                                mode === mode_json &&\n                                <React.Fragment>\n                                    <optgroup label=\"Sample\">\n                                        <option value={$json_sample_json}>\n                                            Sample JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Format\">\n                                        <option value={$json_formatJson}>\n                                            Format JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Edit\">\n                                        <option value={$json_removeProperty}>\n                                            Remove property\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Sort\">\n                                        <option value={$json_sortJson}>\n                                            Sort JSON\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Fix\">\n                                        <option value={$json_fixDataTypes}>\n                                            Fix data types\n                                        </option>\n                                    </optgroup>\n                                    <optgroup label=\"Transform\">\n                                        <option value={$json_jsonToLines}>\n                                            JSON to Lines\n                                        </option>\n                                        <option value={$json_jsonToCsv}>\n                                            JSON to CSV\n                                        </option>\n                                    </optgroup>\n                                </React.Fragment>\n                            }\n                        </Select>\n                    </div>\n                    <div style={{ marginLeft: 5 }}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"small\"\n                            startIcon={<CheckIcon />}\n                            disabled={operation === ''}\n                            onClick={async () => {\n                                const operationsByUser = [\n                                    operation,\n                                    ...recentOperations\n                                ];\n                                // Remove duplicate operations (keep the first occurrence)\n                                const uniqueOperationsByUser = operationsByUser.filter((operation, index) => {\n                                    return operationsByUser.indexOf(operation) === index;\n                                });\n                                setRecentOperations(uniqueOperationsByUser);\n                                localStorage.setItem('recentOperations', JSON.stringify(uniqueOperationsByUser));\n\n                                // DUPLICATE: Some piece of this code is duplicated elsewhere in this project\n                                const getInputValue = () => {\n                                    const value = editorRef.current.getValue();\n                                    return value;\n                                };\n                                const [err, output, extraInfo] = await performOperation({\n                                    getInputValue,\n                                    operation\n                                });\n\n                                if (err) {\n                                    console.error(err);\n                                    alert(err.message); // eslint-disable-line no-alert\n                                } else {\n                                    if (output === null) {\n                                        alert(JSON.stringify(extraInfo, null, '\\t')); // eslint-disable-line no-alert\n                                    } else {\n                                        editorRef.current.setValue(output);\n                                        if (typeof onValueUpdate === 'function') {\n                                            onValueUpdate(output);\n                                        }\n                                    }\n                                }\n                            }}\n                        >\n                            Apply\n                        </Button>\n                    </div>\n                </div>\n                {\n                    recentOperations.length > 0 &&\n                    <div style={{ marginTop: 10 }}>\n                        <div\n                            style={{\n                                display: 'flex',\n                                backgroundColor: '#f5f5f5',\n                                border: '1px solid #e0e0e0',\n                                borderRadius: 999\n                            }}\n                        >\n                            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', fontSize: 12 }}>\n                                <IconButton\n                                    size=\"small\"\n                                    title=\"Reset suggested operations\"\n                                    onClick={() => {\n                                        setRecentOperations(defaultRecommendedOperations);\n                                        localStorage.setItem('recentOperations', JSON.stringify([]));\n                                    }}\n                                >\n                                    <StarIcon style={{ fontSize: 16 }} />\n                                </IconButton>\n                            </div>\n                            <div\n                                style={{\n                                    borderRight: '1px solid #e0e0e0'\n                                }}\n                            ></div>\n                            <div\n                                style={{\n                                    backgroundColor: '#fff',\n                                    width: '100%',\n                                    borderTopRightRadius: 999,\n                                    borderBottomRightRadius: 999\n                                }}\n                            >\n                                <RecentOperations\n                                    editorRef={editorRef}\n                                    onValueUpdate={onValueUpdate}\n                                    mode={mode}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\nTextList.propTypes = {\n    placeholder: PropTypes.string,\n    onLoad: PropTypes.func,\n    onValueUpdate: PropTypes.func,\n    allowFileInput: PropTypes.bool,\n    style: PropTypes.object,\n    editorWidth: PropTypes.string,\n    editorHeight: PropTypes.string\n};\n\nexport { TextList };\n","// import React from 'react';\n\nimport CircleIcon from '@mui/icons-material/Circle.js';\n\nimport AppRegistrationIcon from '@mui/icons-material/AppRegistration.js';\n\nimport SettingsEthernetIcon from '@mui/icons-material/SettingsEthernet.js';\nimport CopyAllIcon from '@mui/icons-material/CopyAll.js';\n// import RestaurantIcon from '@mui/icons-material/Restaurant.js';\n\nimport SortIcon from '@mui/icons-material/Sort.js';\nimport AbcIcon from '@mui/icons-material/Abc.js';\nimport ParkIcon from '@mui/icons-material/Park.js';\nimport ShuffleOnIcon from '@mui/icons-material/ShuffleOn.js';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown.js';\n\nimport CommitIcon from '@mui/icons-material/Commit.js';\nimport CleaningServicesIcon from '@mui/icons-material/CleaningServices.js';\nimport FormatQuoteIcon from '@mui/icons-material/FormatQuote.js';\n\nimport ReorderIcon from '@mui/icons-material/Reorder.js';\nimport DataObjectIcon from '@mui/icons-material/DataObject.js';\nimport AppsIcon from '@mui/icons-material/Apps.js';\nimport MoodIcon from '@mui/icons-material/Mood.js';\nimport PlaylistRemoveIcon from '@mui/icons-material/PlaylistRemove.js';\nimport CategoryIcon from '@mui/icons-material/Category.js';\n\nimport BuildIcon from '@mui/icons-material/Build.js';\n\nimport FirstPageIcon from '@mui/icons-material/FirstPage.js';\nimport LastPageIcon from '@mui/icons-material/LastPage.js';\n\n// import VerticalAlignTopIcon from '@mui/icons-material/VerticalAlignTop.js';\n// import VerticalAlignBottomIcon from '@mui/icons-material/VerticalAlignBottom.js';\n\nimport BarChartIcon from '@mui/icons-material/BarChart.js';\n// import FormatListNumberedRtlIcon from '@mui/icons-material/FormatListNumberedRtl.js';\n// import SubtitlesIcon from '@mui/icons-material/Subtitles.js';\n// import SubtitlesOutlinedIcon from '@mui/icons-material/SubtitlesOutlined.js';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    mode_csv = 'csv',\n    mode_json = 'json',\n    mode_list = 'list';\n\n// eslint-disable-next-line import/exports-last\nexport const\n    $list_sample_list                        = '$list_sample_list',\n\n    $list_removeEmptyLines                   = '$list_removeEmptyLines',\n    $list_removeDuplicates                   = '$list_removeDuplicates',\n    // $list_removeBeyondNLines              = '$list_removeBeyondNLines',\n\n    $list_sort                               = '$list_sort',\n    $list_caseInsensitiveSort                = '$list_caseInsensitiveSort',\n    $list_naturalSort                        = '$list_naturalSort',\n    $list_randomize                          = '$list_randomize',\n    $list_reverse                            = '$list_reverse',\n\n    $list_trimLines                          = '$list_trimLines',\n    $list_removeCommaCharacterAtLineEnds     = '$list_removeCommaCharacterAtLineEnds',\n    $list_removeQuoteAndApostropheCharacters = '$list_removeQuoteAndApostropheCharacters',\n\n    $list_getStats                           = '$list_getStats',\n    // $list_countLines                      = '$list_countLines',\n    // $list_countCharacters                 = '$list_countCharacters',\n    // $list_countWords                      = '$list_countWords',\n    // $list_countUniqueWords                = '$list_countUniqueWords',\n\n    $list_linesToJsonArray                   = '$list_linesToJsonArray',\n\n    $csv_sample_csv                          = '$csv_sample_csv',\n\n    $csv_removeFirstColumnFromCsv            = '$csv_removeFirstColumnFromCsv',\n    $csv_removeLastColumnFromCsv             = '$csv_removeLastColumnFromCsv',\n\n    $csv_csvToJson                           = '$csv_csvToJson',\n\n    $json_sample_json                        = '$json_sample_json',\n\n    $json_formatJson                         = '$json_formatJson',\n\n    $json_removeProperty                     = '$json_removeProperty',\n\n    $json_sortJson                           = '$json_sortJson',\n\n    $json_fixDataTypes                       = '$json_fixDataTypes',\n\n    // $json_removeFirstProperty             = '$json_removeFirstProperty',\n    // $json_removeLastProperty              = '$json_removeLastProperty',\n\n    $json_jsonToLines                        = '$json_jsonToLines',\n    $json_jsonToCsv                          = '$json_jsonToCsv';\n\n\n// eslint-disable-next-line import/exports-last\nexport const defaultRecommendedOperations = [\n    $csv_sample_csv,\n    $json_sample_json,\n    $list_sample_list\n];\n\n// eslint-disable-next-line import/exports-last\nexport const IconNotAvailable = CircleIcon;\n\nconst\n    availableOperations = {\n        [mode_csv]: {\n            [$csv_sample_csv]                          : { message: 'Sample CSV',                             Icon: AppRegistrationIcon },\n\n            [$csv_removeFirstColumnFromCsv]            : { message: 'Remove first column from CSV',           Icon: FirstPageIcon },\n            [$csv_removeLastColumnFromCsv]             : { message: 'Remove last column from CSV',            Icon: LastPageIcon },\n\n            [$csv_csvToJson]                           : { message: 'CSV to JSON',                            Icon: DataObjectIcon }\n        },\n        [mode_json]: {\n            [$json_sample_json]                        : { message: 'Sample JSON',                            Icon: AppRegistrationIcon },\n\n            [$json_formatJson]                         : { message: 'Format JSON',                            Icon: MoodIcon },\n\n            [$json_removeProperty]                     : { message: 'Remove property',                        Icon: PlaylistRemoveIcon },\n\n            [$json_sortJson]                           : { message: 'Sort JSON',                              Icon: CategoryIcon },\n\n            [$json_fixDataTypes]                       : { message: 'Fix data types',                         Icon: BuildIcon },\n\n            // [$json_removeFirstProperty]             : { message: 'Remove first property',                  Icon: VerticalAlignTopIcon },\n            // [$json_removeLastProperty]              : { message: 'Remove last property',                   Icon: VerticalAlignBottomIcon },\n\n            [$json_jsonToLines]                        : { message: 'JSON to lines',                          Icon: ReorderIcon },\n            [$json_jsonToCsv]                          : { message: 'JSON to CSV',                            Icon: AppsIcon }\n        },\n        [mode_list]: {\n            [$list_sample_list]                        : { message: 'Sample list',                            Icon: AppRegistrationIcon },\n\n            [$list_removeEmptyLines]                   : { message: 'Remove empty lines',                     Icon: SettingsEthernetIcon },\n            [$list_removeDuplicates]                   : { message: 'Remove duplicates',                      Icon: CopyAllIcon },\n            // [$list_removeBeyondNLines]              : { message: 'Remove beyond N lines',                  Icon: RestaurantIcon },\n\n            [$list_sort]                               : { message: 'Sort',                                   Icon: SortIcon },\n            [$list_caseInsensitiveSort]                : { message: 'Case-insensitive sort',                  Icon: AbcIcon },\n            [$list_naturalSort]                        : { message: 'Natural sort',                           Icon: ParkIcon },\n            [$list_randomize]                          : { message: 'Randomize',                              Icon: ShuffleOnIcon },\n            [$list_reverse]                            : { message: 'Reverse',                                Icon: KeyboardDoubleArrowDownIcon },\n\n            [$list_trimLines]                          : { message: 'Trim lines',                             Icon: CommitIcon },\n            [$list_removeCommaCharacterAtLineEnds]     : { message: 'Remove comma character at line ends',    Icon: CleaningServicesIcon },\n            [$list_removeQuoteAndApostropheCharacters] : { message: 'Remove quote and apostrophe characters', Icon: FormatQuoteIcon },\n\n            [$list_getStats]                           : { message: 'Get stats',                              Icon: BarChartIcon },\n            // [$list_countLines]                      : { message: 'Count lines',                            Icon: FormatListNumberedRtlIcon },\n            // [$list_countCharacters]                 : { message: 'Count characters',                       Icon: AbcIcon },\n            // [$list_countWords]                      : { message: 'Count words',                            Icon: SubtitlesIcon },\n            // [$list_countUniqueWords]                : { message: 'Count unique words',                     Icon: SubtitlesOutlinedIcon },\n\n            [$list_linesToJsonArray]                   : { message: 'Lines to JSON Array',                    Icon: DataObjectIcon }\n        }\n    };\n\nconst allOperationsById = {};\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        allOperationsById[operationId] = operationsForMode[operationId];\n    }\n}\n\nfor (const mode in availableOperations) {\n    const operationsForMode = availableOperations[mode];\n    for (const operationId in operationsForMode) {\n        operationsForMode[operationId].id = operationId;\n    }\n}\n\nconst allOperationIds = Object.keys(allOperationsById);\n\nexport {\n    availableOperations,\n    allOperationsById,\n    allOperationIds\n};\n","import {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n} from './textUtils.js';\n\nimport {\n    $list_sample_list,\n\n    $list_removeEmptyLines,\n    $list_removeDuplicates,\n\n    $list_sort,\n    $list_caseInsensitiveSort,\n    $list_naturalSort,\n    $list_randomize,\n    $list_reverse,\n\n    $list_trimLines,\n    $list_removeCommaCharacterAtLineEnds,\n    $list_removeQuoteAndApostropheCharacters,\n\n    $list_getStats,\n\n    $list_linesToJsonArray,\n\n    $csv_sample_csv,\n\n    $csv_removeFirstColumnFromCsv,\n    $csv_removeLastColumnFromCsv,\n\n    $csv_csvToJson,\n\n    $json_sample_json,\n\n    $json_formatJson,\n\n    $json_removeProperty,\n\n    $json_sortJson,\n\n    $json_fixDataTypes,\n\n    $json_jsonToLines,\n    $json_jsonToCsv\n} from './constOperations.js';\n\nconst performOperation = async function ({ getInputValue, operation }) {\n    try {\n        if (\n            [\n                $json_formatJson,\n                $json_removeProperty,\n                $json_sortJson,\n                $json_fixDataTypes,\n                $json_jsonToLines,\n                $json_jsonToCsv\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const jsonInput = JSON.parse(input);\n            let output;\n\n            switch (operation) {\n                case $json_formatJson:\n                    output = JSON.stringify(jsonInput, null, '\\t');\n                    break;\n                case $json_removeProperty:\n                    // Just a block\n                    {\n                        // Remove a property from a JSON object recursively\n                        // TODO: Optimize this function\n                        // TODO: Verify that this function works as expected for all cases\n                        const removePropertyRecursively = (obj, propertyName) => {\n                            // eslint-disable-next-line no-prototype-builtins\n                            if (obj.hasOwnProperty(propertyName)) {\n                                delete obj[propertyName];\n                            } else {\n                                Object.keys(obj).forEach(key => {\n                                    if (typeof obj[key] === 'object') {\n                                        removePropertyRecursively(obj[key], propertyName);\n                                    } else if (Array.isArray(obj[key])) {\n                                        obj[key].forEach(item => {\n                                            if (typeof item === 'object') {\n                                                removePropertyRecursively(item, propertyName);\n                                            } else {\n                                                // Do nothing\n                                            }\n                                        });\n                                    } else {\n                                        // Do nothing\n                                    }\n                                });\n                            }\n                        };\n\n                        // eslint-disable-next-line no-alert\n                        const propertyName = prompt('Please enter the name of the property to remove:');\n                        if (propertyName) {\n                            removePropertyRecursively(jsonInput, propertyName);\n                            output = JSON.stringify(jsonInput, null, '\\t');\n                        } else {\n                            return [new Error('Please provide a property name.')];\n                        }\n                    }\n                    break;\n                case $json_sortJson:\n                    output = jsonStableStringify(jsonInput, { space: '\\t' });\n                    break;\n                case $json_fixDataTypes:\n                    output = fixDataTypes(jsonInput);\n                    output = JSON.stringify(output, null, '\\t');\n                    break;\n                case $json_jsonToLines:\n                    if (\n                        Array.isArray(jsonInput) &&\n                        jsonInput.every(item => typeof item === 'string')\n                    ) {\n                        output = jsonInput.join('\\n');\n                    } else {\n                        return [new Error('Please provide an Array of Strings as the input.')];\n                    }\n                    break;\n                case $json_jsonToCsv:\n                    output = jsonToCsv(jsonInput);\n                    break;\n            }\n\n            return [null, output];\n        } else if (\n            [\n                $list_getStats\n            ].includes(operation)\n        ) {\n            switch (operation) {\n                case $list_getStats:\n                {\n                    const stats = {};\n\n                    const input = getInputValue();\n                    const lines = input.split('\\n');\n                    stats.linesCount = lines.length;\n                    stats.charactersCount = input.length;\n\n                    // Replace all punctuation characters with a single space\n                    const inputWithoutPunctuation = input.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, ' '); // eslint-disable-line no-useless-escape\n\n                    // Replace all continuous whitespace characters with a single space\n                    const inputWithoutWhitespace = inputWithoutPunctuation.replace(/\\s+/g, ' ');\n\n                    const words = inputWithoutWhitespace.split(' ');\n                    stats.wordsCount = words.length; // Not a perfect way to count words, but it's good enough for now.\n\n                    stats.uniqueWordsCount = (new Set(words)).size;\n\n                    return [null, null, { stats }];\n                }\n            }\n        } else if (\n            [\n                $csv_sample_csv,\n\n                $csv_removeFirstColumnFromCsv,\n                $csv_removeLastColumnFromCsv,\n\n                $csv_csvToJson,\n\n                $json_sample_json,\n\n                $list_sample_list,\n\n                $list_removeEmptyLines,\n                $list_removeDuplicates,\n\n                $list_sort,\n                $list_caseInsensitiveSort,\n                $list_naturalSort,\n                $list_randomize,\n                $list_reverse,\n\n                $list_trimLines,\n                $list_removeCommaCharacterAtLineEnds,\n                $list_removeQuoteAndApostropheCharacters,\n\n                $list_linesToJsonArray\n            ].includes(operation)\n        ) {\n            const input = getInputValue();\n            const lines = input.split('\\n');\n\n            let output = lines;\n\n            switch (operation) {\n                case $csv_sample_csv:\n                    output = [\n                        'Name,Age,Height',\n                        'Charlie,22,1.85',\n                        'Bob,21,1.75',\n                        'Alice,20,1.65',\n                        'David,23,1.95'\n                    ];\n                    break;\n                case $csv_removeFirstColumnFromCsv:\n                    output = removeFirstColumnFromCsvLines(lines);\n                    break;\n                case $csv_removeLastColumnFromCsv:\n                    output = removeLastColumnFromCsvLines(lines);\n                    break;\n\n                case $csv_csvToJson:\n                    output = csvToJson(lines);\n                    break;\n\n                case $json_sample_json:\n                    output = [\n                        '{',\n                        '    \"data\": [',\n                        '        { \"name\": \"Charlie\", \"age\": 22, \"height\": 1.85 },',\n                        '        { \"name\": \"Bob\",     \"age\": 21, \"height\": 1.75 },',\n                        '        { \"name\": \"Alice\",   \"age\": 20, \"height\": 1.65 },',\n                        '        { \"name\": \"David\",   \"age\": 23, \"height\": 1.95 }',\n                        '    ]',\n                        '}'\n                    ];\n                    break;\n\n                case $list_sample_list:\n                    output = [\n                        'Charlie',\n                        'Bob',\n                        'Alice',\n                        'David'\n                    ];\n                    break;\n\n                case $list_removeEmptyLines:\n                    output = removeEmptyLines(lines);\n                    break;\n                case $list_removeDuplicates:\n                    output = removeDuplicates(lines);\n                    break;\n\n                case $list_sort:\n                    lines.sort(); // TODO: We may want to use \".toSorted()\" when it becomes available in modern browsers (though performance-wise it may actually be disadvantageous).\n                    output = lines;\n                    break;\n                case $list_caseInsensitiveSort:\n                    lines.sort((a, b) => {\n                        return a.toLowerCase().localeCompare(b.toLowerCase());\n                    });\n                    output = lines;\n                    break;\n                case $list_naturalSort:\n                    lines.sort((a, b) => {\n                        return a.localeCompare(b, undefined, { numeric: true });\n                    });\n                    output = lines;\n                    break;\n                case $list_randomize:\n                    lines.sort(() => Math.random() - 0.5);\n                    output = lines;\n                    break;\n                case $list_reverse:\n                    lines.reverse();\n                    output = lines;\n                    break;\n\n                case $list_trimLines:\n                    output = trimLines(lines);\n                    break;\n                case $list_removeCommaCharacterAtLineEnds:\n                    output = removeCommaCharacterAtEndFromLines(lines);\n                    break;\n                case $list_removeQuoteAndApostropheCharacters:\n                    output = removeQuoteAndApostropheCharactersFromLines(lines);\n                    break;\n\n                case $list_linesToJsonArray:\n                    output = JSON.stringify(lines, null, '\\t');\n                    output = output.split('\\n');\n                    break;\n            }\n\n            const finalOutput = output.join('\\n');\n            return [null, finalOutput];\n        } else {\n            return [new Error(`Error: Implementation is not available for operation: ${operation}`)];\n        }\n    } catch (err) {\n        return [err];\n    }\n};\n\nexport { performOperation };\n","import jsonStableStringify from 'json-stable-stringify';\n\nconst removeEmptyLines = function (lines) {\n    const output = lines.filter((x) => {\n        return x;\n    });\n    return output;\n};\n\nconst removeDuplicates = function (lines) {\n    const output = [...new Set(lines)];\n    return output;\n};\n\nconst trimLine = (line) => {\n    return line.trim();\n};\nconst trimLines = function (lines) {\n    const output = lines.map(trimLine);\n    return output;\n};\n\nconst removeMatchingCharacterAtEndFromLine = function (line, char) {\n    if (line[line.length - 1] === char) {\n        return line.substring(0, line.length - 1);\n    }\n    return line;\n};\n\nconst removeCommaCharacterAtEndFromLine = function (line) {\n    return removeMatchingCharacterAtEndFromLine(line, ',');\n};\n\nconst removeCommaCharacterAtEndFromLines = function (lines) {\n    const output = lines.map(removeCommaCharacterAtEndFromLine);\n    return output;\n};\n\nconst removeQuoteAndApostropheCharactersFromLine = function (line) {\n    return (\n        line\n            .replaceAll('\"', '')\n            .replaceAll(\"'\", '')\n    );\n};\nconst removeQuoteAndApostropheCharactersFromLines = function (lines) {\n    const output = lines.map(removeQuoteAndApostropheCharactersFromLine);\n    return output;\n};\n\nconst removeLastColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.pop();\n    return columns.join(',');\n};\nconst removeLastColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeLastColumnFromCsvLine);\n    return output;\n};\n\nconst removeFirstColumnFromCsvLine = (line) => {\n    const columns = line.split(',');\n    columns.shift();\n    const output = columns.join(',');\n    return output;\n};\nconst removeFirstColumnFromCsvLines = function (lines) {\n    const output = lines.map(removeFirstColumnFromCsvLine);\n    return output;\n};\n\nconst csvToJson = function (lines) {\n    const output = ['['];\n    const headers = lines[0].split(',');\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const columns = line.split(',');\n        const obj = {};\n\n        // eslint-disable-next-line unicorn/no-for-loop\n        for (let j = 0; j < columns.length; j++) {\n            const column = columns[j];\n            const header = headers[j];\n            obj[header] = column;\n        }\n        if (i < lines.length - 1) {\n            output.push('\\t' + JSON.stringify(obj) + ',');\n        } else {\n            output.push('\\t' + JSON.stringify(obj));\n        }\n    }\n    output.push(']');\n    return output;\n};\n\nconst traverseNode = function (root, transform) {\n    const output = transform(root);\n\n    if (typeof output === 'object') {\n        for (const key in output) {\n            output[key] = traverseNode(output[key], transform);\n        }\n    }\n\n    return output;\n};\n\nconst fixDataTypes = function (json) {\n    const output = traverseNode(json, function (node) {\n        if (typeof node === 'string') {\n            if (node === 'true') {\n                node = true;\n            } else if (node === 'false') {\n                node = false;\n            } else if (node === 'null') {\n                node = null;\n            } else if (String(Number(node)) === node) {\n                if (\n                    String(Number(node)) === 'Infinity' ||\n                    String(Number(node)) === '-Infinity' ||\n                    String(Number(node)) === 'NaN'\n                ) {\n                    // Do nothing\n                } else {\n                    node = Number(node);\n                }\n            }\n        } else if (Array.isArray(node)) {\n            node = node.map(item => {\n                return fixDataTypes(item);\n            });\n        } else if (typeof node === 'object') {\n            for (const key in node) {\n                node[key] = fixDataTypes(node[key]);\n            }\n        }\n\n        return node;\n    });\n\n    return output;\n};\n\nconst jsonToCsv = function (json) {\n    const line = [];\n    const output = [];\n\n    const keys = Object.keys(json[0]);\n    for (const key of keys) {\n        line.push(key);\n    }\n    output.push(line.join(','));\n\n    for (const ob of json) {\n        const line = [];\n        for (const key of keys) {\n            line.push(ob[key]);\n        }\n        output.push(line.join(','));\n    }\n\n    return output.join('\\n');\n};\n\nexport {\n    removeEmptyLines,\n    removeDuplicates,\n\n    trimLines,\n    removeCommaCharacterAtEndFromLines,\n    removeQuoteAndApostropheCharactersFromLines,\n\n    removeFirstColumnFromCsvLines,\n    removeLastColumnFromCsvLines,\n\n    csvToJson,\n\n    fixDataTypes,\n    jsonStableStringify,\n    jsonToCsv\n};\n","import React from 'react';\n\nimport styles from './PageFooter.css';\n\nimport { CreatedByMessage } from 'generic-components/CreatedByMessage/CreatedByMessage.js';\n\nclass PageFooter extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageFooter}>\n                <div\n                    style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        marginTop: 45,\n                        marginBottom: 20\n                    }}\n                >\n                    <div>\n                        <div>\n                            <CreatedByMessage />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageFooter };\n","import React from 'react';\n\nimport styles from './PageHeader.css';\n\nclass PageHeader extends React.Component {\n    render() {\n        return (\n            <div className={styles.PageHeader}>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                        marginTop: 25\n                    }}\n                >\n                    <h1 style={{ margin: 0, textAlign: 'center' }}>\n                        {'Transformers: '}\n                        <span style={{ fontVariant: 'small-caps' }}>\n                            <span style={{ letterSpacing: '0.05em' }}>\n                                Operations&nbsp;on&nbsp;the&nbsp;Text\n                            </span>\n                        </span>\n                    </h1>\n                    <h3 style={{ fontSize: 11, margin: '10px 0 0 0', color: '#555', textAlign: 'center' }}>\n                        Operations for Lists, Sets, CSV, JSON, etc\n                    </h3>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { PageHeader };\n","/* eslint-disable filenames/no-index */\n\nimport React from 'react';\nimport { createRoot } from 'react-dom/client'; // eslint-disable-line node/file-extension-in-import\n\n\nimport './index.css';\n\nimport { App } from './App/App.js';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container);\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"Dashboard\":\"Dashboard__Dashboard--d2pNX\"};","// extracted by mini-css-extract-plugin\nexport default {\"ListOperations\":\"ListOperations__ListOperations--VCX0Q\"};","// extracted by mini-css-extract-plugin\nexport default {\"TextList\":\"TextList__TextList--NZ7zn\",\"translucentWithoutHover\":\"TextList__translucentWithoutHover--n0_xk\"};","// extracted by mini-css-extract-plugin\nexport default {\"PageFooter\":\"PageFooter__PageFooter--yI25Y\"};","// extracted by mini-css-extract-plugin\nexport default {\"PageHeader\":\"PageHeader__PageHeader--AAWQ1\"};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.amdD = function () {\n\tthrow new Error('define cannot be used indirect');\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktransformers\"] = self[\"webpackChunktransformers\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [360,375], () => (__webpack_require__(29506)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","App","React","Component","render","PageHeader","Dashboard","PageFooter","className","styles","style","marginTop","ListOperations","performABToC","editorARef","editorBRef","editorCRef","operation","valueA","current","getValue","valueB","a","split","b","c","union","intersection","difference","valueC","join","setValue","useRef","display","justifyContent","minWidth","textAlign","fontFamily","fontSize","TextList","placeholder","onLoad","editor","editorWidth","editorHeight","marginLeft","flexDirection","height","variant","color","size","onClick","type","recentOperationsFromLocalStorage","localStorage","getItem","recentOperations","JSON","parse","Array","isArray","defaultRecommendedOperations","err","console","error","filter","allOperationIds","includes","recentOperationsAtom","atom","RecentOperations","editorRef","onValueUpdate","mode","setRecentOperations","useAtom","width","overflow","paddingLeft","availableOperations","map","index","operationsForMode","key","title","message","async","operationsByUser","uniqueOperationsByUser","indexOf","setItem","stringify","output","extraInfo","performOperation","getInputValue","alert","Icon","allOperationsById","IconNotAvailable","propTypes","PropTypes","object","isRequired","func","string","copy","simpleText","navigator","clipboard","writeText","e","allowFileInput","setMode","useLocalStorage","mode_list","raw","selectedOperations","setSelectedOperations","mode_csv","mode_json","flagSyntaxHighlighting","setFlagSyntaxHighlighting","flagLineWrap","setFlagLineWrap","refreshUndoRedo","setRefreshUndoRedo","useState","Date","now","modeForSyntaxHighlighting","translucentWithoutHover","selectedText","getSelectedText","selectAll","execCommand","text","disabled","getSession","getUndoManager","hasUndo","hasRedo","undefined","input","blob","Blob","document","createElement","extension","href","URL","createObjectURL","localTimeAsPartOfFilename","getTimezoneOffset","toISOString","substring","replace","download","click","BorderColorIcon","BorderColorOutlinedIcon","native","value","onChange","target","setOptions","wrap","theme","evt","editorProps","$blockScrolling","alignItems","json","Fragment","label","$list_sample_list","$list_removeEmptyLines","$list_removeDuplicates","$list_sort","$list_caseInsensitiveSort","$list_naturalSort","$list_randomize","$list_reverse","$list_trimLines","$list_removeCommaCharacterAtLineEnds","$list_removeQuoteAndApostropheCharacters","$list_getStats","$list_linesToJsonArray","$csv_sample_csv","$csv_removeFirstColumnFromCsv","$csv_removeLastColumnFromCsv","$csv_csvToJson","$json_sample_json","$json_formatJson","$json_removeProperty","$json_sortJson","$json_fixDataTypes","$json_jsonToLines","$json_jsonToCsv","startIcon","length","backgroundColor","border","borderRadius","borderRight","borderTopRightRadius","borderBottomRightRadius","bool","CircleIcon","AppRegistrationIcon","FirstPageIcon","LastPageIcon","DataObjectIcon","MoodIcon","PlaylistRemoveIcon","CategoryIcon","BuildIcon","ReorderIcon","AppsIcon","SettingsEthernetIcon","CopyAllIcon","SortIcon","AbcIcon","ParkIcon","ShuffleOnIcon","KeyboardDoubleArrowDownIcon","CommitIcon","CleaningServicesIcon","FormatQuoteIcon","BarChartIcon","operationId","id","Object","keys","jsonInput","removePropertyRecursively","obj","propertyName","hasOwnProperty","forEach","item","prompt","Error","jsonStableStringify","space","fixDataTypes","every","jsonToCsv","lines","removeFirstColumnFromCsvLines","removeLastColumnFromCsvLines","csvToJson","removeEmptyLines","removeDuplicates","sort","toLowerCase","localeCompare","numeric","Math","random","reverse","trimLines","removeCommaCharacterAtEndFromLines","removeQuoteAndApostropheCharactersFromLines","stats","linesCount","charactersCount","words","wordsCount","uniqueWordsCount","Set","trimLine","line","trim","removeCommaCharacterAtEndFromLine","char","removeMatchingCharacterAtEndFromLine","removeQuoteAndApostropheCharactersFromLine","replaceAll","removeLastColumnFromCsvLine","columns","pop","removeFirstColumnFromCsvLine","shift","traverseNode","root","transform","node","String","Number","x","headers","i","j","column","push","ob","marginBottom","CreatedByMessage","margin","fontVariant","letterSpacing","container","getElementById","createRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","amdD","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","splice","r","n","getter","__esModule","d","getPrototypeOf","t","this","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","g","globalThis","Function","window","prop","prototype","Symbol","toStringTag","nmd","paths","children","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}